
Otomat_Proje.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003454  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080035dc  080035dc  000135dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f8  080039f8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a00  08003a00  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08003a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  200001e4  08003bec  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08003bec  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092bb  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016c7  00000000  00000000  000294cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  0002ab98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  0002b4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fa9a  00000000  00000000  0002bd30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007ce6  00000000  00000000  0004b7ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c03ae  00000000  00000000  000534b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011385e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a4  00000000  00000000  001138dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080035c4 	.word	0x080035c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	080035c4 	.word	0x080035c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	f023 030f 	bic.w	r3, r3, #15
 80004d8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	011b      	lsls	r3, r3, #4
 80004de:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	f043 030c 	orr.w	r3, r3, #12
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	f043 0308 	orr.w	r3, r3, #8
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004f4:	7bbb      	ldrb	r3, [r7, #14]
 80004f6:	f043 030c 	orr.w	r3, r3, #12
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004fe:	7bbb      	ldrb	r3, [r7, #14]
 8000500:	f043 0308 	orr.w	r3, r3, #8
 8000504:	b2db      	uxtb	r3, r3
 8000506:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000508:	f107 0208 	add.w	r2, r7, #8
 800050c:	2364      	movs	r3, #100	; 0x64
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2304      	movs	r3, #4
 8000512:	214e      	movs	r1, #78	; 0x4e
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <lcd_send_cmd+0x5c>)
 8000516:	f001 fc2b 	bl	8001d70 <HAL_I2C_Master_Transmit>
}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	2000020c 	.word	0x2000020c

08000528 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af02      	add	r7, sp, #8
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	f023 030f 	bic.w	r3, r3, #15
 8000538:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	011b      	lsls	r3, r3, #4
 800053e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	f043 030d 	orr.w	r3, r3, #13
 8000546:	b2db      	uxtb	r3, r3
 8000548:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	f043 0309 	orr.w	r3, r3, #9
 8000550:	b2db      	uxtb	r3, r3
 8000552:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000554:	7bbb      	ldrb	r3, [r7, #14]
 8000556:	f043 030d 	orr.w	r3, r3, #13
 800055a:	b2db      	uxtb	r3, r3
 800055c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800055e:	7bbb      	ldrb	r3, [r7, #14]
 8000560:	f043 0309 	orr.w	r3, r3, #9
 8000564:	b2db      	uxtb	r3, r3
 8000566:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000568:	f107 0208 	add.w	r2, r7, #8
 800056c:	2364      	movs	r3, #100	; 0x64
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2304      	movs	r3, #4
 8000572:	214e      	movs	r1, #78	; 0x4e
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <lcd_send_data+0x5c>)
 8000576:	f001 fbfb 	bl	8001d70 <HAL_I2C_Master_Transmit>
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000020c 	.word	0x2000020c

08000588 <lcd_clear>:

void lcd_clear (void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff ff9a 	bl	80004c8 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	e005      	b.n	80005a6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800059a:	2020      	movs	r0, #32
 800059c:	f7ff ffc4 	bl	8000528 <lcd_send_data>
	for (int i=0; i<100; i++)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3301      	adds	r3, #1
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b63      	cmp	r3, #99	; 0x63
 80005aa:	ddf6      	ble.n	800059a <lcd_clear+0x12>
	}
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <lcd_init>:

void lcd_init (void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80005b8:	2032      	movs	r0, #50	; 0x32
 80005ba:	f000 ffa1 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005be:	2030      	movs	r0, #48	; 0x30
 80005c0:	f7ff ff82 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80005c4:	2005      	movs	r0, #5
 80005c6:	f000 ff9b 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005ca:	2030      	movs	r0, #48	; 0x30
 80005cc:	f7ff ff7c 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80005d0:	2001      	movs	r0, #1
 80005d2:	f000 ff95 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005d6:	2030      	movs	r0, #48	; 0x30
 80005d8:	f7ff ff76 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(10);
 80005dc:	200a      	movs	r0, #10
 80005de:	f000 ff8f 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80005e2:	2020      	movs	r0, #32
 80005e4:	f7ff ff70 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(10);
 80005e8:	200a      	movs	r0, #10
 80005ea:	f000 ff89 	bl	8001500 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80005ee:	2028      	movs	r0, #40	; 0x28
 80005f0:	f7ff ff6a 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 ff83 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80005fa:	2008      	movs	r0, #8
 80005fc:	f7ff ff64 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f000 ff7d 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000606:	2001      	movs	r0, #1
 8000608:	f7ff ff5e 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(1);
 800060c:	2001      	movs	r0, #1
 800060e:	f000 ff77 	bl	8001500 <HAL_Delay>
	HAL_Delay(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f000 ff74 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000618:	2006      	movs	r0, #6
 800061a:	f7ff ff55 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 ff6e 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000624:	200c      	movs	r0, #12
 8000626:	f7ff ff4f 	bl	80004c8 <lcd_send_cmd>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}

0800062e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000636:	e006      	b.n	8000646 <lcd_send_string+0x18>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	1c5a      	adds	r2, r3, #1
 800063c:	607a      	str	r2, [r7, #4]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff71 	bl	8000528 <lcd_send_data>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f4      	bne.n	8000638 <lcd_send_string+0xa>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <read_keypad>:
#define C4_PIN GPIO_PIN_0



char read_keypad (void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);  //Pull the R1 low
 800065c:	2200      	movs	r2, #0
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	48af      	ldr	r0, [pc, #700]	; (8000920 <read_keypad+0x2c8>)
 8000662:	f001 fa33 	bl	8001acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 8000666:	2201      	movs	r2, #1
 8000668:	2140      	movs	r1, #64	; 0x40
 800066a:	48ad      	ldr	r0, [pc, #692]	; (8000920 <read_keypad+0x2c8>)
 800066c:	f001 fa2e 	bl	8001acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 8000670:	2201      	movs	r2, #1
 8000672:	2120      	movs	r1, #32
 8000674:	48aa      	ldr	r0, [pc, #680]	; (8000920 <read_keypad+0x2c8>)
 8000676:	f001 fa29 	bl	8001acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 800067a:	2201      	movs	r2, #1
 800067c:	2110      	movs	r1, #16
 800067e:	48a8      	ldr	r0, [pc, #672]	; (8000920 <read_keypad+0x2c8>)
 8000680:	f001 fa24 	bl	8001acc <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 8000684:	2108      	movs	r1, #8
 8000686:	48a6      	ldr	r0, [pc, #664]	; (8000920 <read_keypad+0x2c8>)
 8000688:	f001 fa08 	bl	8001a9c <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d109      	bne.n	80006a6 <read_keypad+0x4e>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 8000692:	bf00      	nop
 8000694:	2108      	movs	r1, #8
 8000696:	48a2      	ldr	r0, [pc, #648]	; (8000920 <read_keypad+0x2c8>)
 8000698:	f001 fa00 	bl	8001a9c <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f8      	beq.n	8000694 <read_keypad+0x3c>
		return '1';
 80006a2:	2331      	movs	r3, #49	; 0x31
 80006a4:	e13a      	b.n	800091c <read_keypad+0x2c4>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80006a6:	2104      	movs	r1, #4
 80006a8:	489d      	ldr	r0, [pc, #628]	; (8000920 <read_keypad+0x2c8>)
 80006aa:	f001 f9f7 	bl	8001a9c <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d109      	bne.n	80006c8 <read_keypad+0x70>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 80006b4:	bf00      	nop
 80006b6:	2104      	movs	r1, #4
 80006b8:	4899      	ldr	r0, [pc, #612]	; (8000920 <read_keypad+0x2c8>)
 80006ba:	f001 f9ef 	bl	8001a9c <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d0f8      	beq.n	80006b6 <read_keypad+0x5e>
		return '2';
 80006c4:	2332      	movs	r3, #50	; 0x32
 80006c6:	e129      	b.n	800091c <read_keypad+0x2c4>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 80006c8:	2102      	movs	r1, #2
 80006ca:	4895      	ldr	r0, [pc, #596]	; (8000920 <read_keypad+0x2c8>)
 80006cc:	f001 f9e6 	bl	8001a9c <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d109      	bne.n	80006ea <read_keypad+0x92>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 80006d6:	bf00      	nop
 80006d8:	2102      	movs	r1, #2
 80006da:	4891      	ldr	r0, [pc, #580]	; (8000920 <read_keypad+0x2c8>)
 80006dc:	f001 f9de 	bl	8001a9c <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0f8      	beq.n	80006d8 <read_keypad+0x80>
		return '3';
 80006e6:	2333      	movs	r3, #51	; 0x33
 80006e8:	e118      	b.n	800091c <read_keypad+0x2c4>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 80006ea:	2101      	movs	r1, #1
 80006ec:	488c      	ldr	r0, [pc, #560]	; (8000920 <read_keypad+0x2c8>)
 80006ee:	f001 f9d5 	bl	8001a9c <HAL_GPIO_ReadPin>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d109      	bne.n	800070c <read_keypad+0xb4>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 80006f8:	bf00      	nop
 80006fa:	2101      	movs	r1, #1
 80006fc:	4888      	ldr	r0, [pc, #544]	; (8000920 <read_keypad+0x2c8>)
 80006fe:	f001 f9cd 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0f8      	beq.n	80006fa <read_keypad+0xa2>
		return 'A';
 8000708:	2341      	movs	r3, #65	; 0x41
 800070a:	e107      	b.n	800091c <read_keypad+0x2c4>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 800070c:	2201      	movs	r2, #1
 800070e:	2180      	movs	r1, #128	; 0x80
 8000710:	4883      	ldr	r0, [pc, #524]	; (8000920 <read_keypad+0x2c8>)
 8000712:	f001 f9db 	bl	8001acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);  // Pull the R2 High
 8000716:	2200      	movs	r2, #0
 8000718:	2140      	movs	r1, #64	; 0x40
 800071a:	4881      	ldr	r0, [pc, #516]	; (8000920 <read_keypad+0x2c8>)
 800071c:	f001 f9d6 	bl	8001acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 8000720:	2201      	movs	r2, #1
 8000722:	2120      	movs	r1, #32
 8000724:	487e      	ldr	r0, [pc, #504]	; (8000920 <read_keypad+0x2c8>)
 8000726:	f001 f9d1 	bl	8001acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 800072a:	2201      	movs	r2, #1
 800072c:	2110      	movs	r1, #16
 800072e:	487c      	ldr	r0, [pc, #496]	; (8000920 <read_keypad+0x2c8>)
 8000730:	f001 f9cc 	bl	8001acc <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 8000734:	2108      	movs	r1, #8
 8000736:	487a      	ldr	r0, [pc, #488]	; (8000920 <read_keypad+0x2c8>)
 8000738:	f001 f9b0 	bl	8001a9c <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d109      	bne.n	8000756 <read_keypad+0xfe>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 8000742:	bf00      	nop
 8000744:	2108      	movs	r1, #8
 8000746:	4876      	ldr	r0, [pc, #472]	; (8000920 <read_keypad+0x2c8>)
 8000748:	f001 f9a8 	bl	8001a9c <HAL_GPIO_ReadPin>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0f8      	beq.n	8000744 <read_keypad+0xec>
		return '4';
 8000752:	2334      	movs	r3, #52	; 0x34
 8000754:	e0e2      	b.n	800091c <read_keypad+0x2c4>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 8000756:	2104      	movs	r1, #4
 8000758:	4871      	ldr	r0, [pc, #452]	; (8000920 <read_keypad+0x2c8>)
 800075a:	f001 f99f 	bl	8001a9c <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d109      	bne.n	8000778 <read_keypad+0x120>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 8000764:	bf00      	nop
 8000766:	2104      	movs	r1, #4
 8000768:	486d      	ldr	r0, [pc, #436]	; (8000920 <read_keypad+0x2c8>)
 800076a:	f001 f997 	bl	8001a9c <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0f8      	beq.n	8000766 <read_keypad+0x10e>
		return '5';
 8000774:	2335      	movs	r3, #53	; 0x35
 8000776:	e0d1      	b.n	800091c <read_keypad+0x2c4>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 8000778:	2102      	movs	r1, #2
 800077a:	4869      	ldr	r0, [pc, #420]	; (8000920 <read_keypad+0x2c8>)
 800077c:	f001 f98e 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d109      	bne.n	800079a <read_keypad+0x142>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 8000786:	bf00      	nop
 8000788:	2102      	movs	r1, #2
 800078a:	4865      	ldr	r0, [pc, #404]	; (8000920 <read_keypad+0x2c8>)
 800078c:	f001 f986 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0f8      	beq.n	8000788 <read_keypad+0x130>
		return '6';
 8000796:	2336      	movs	r3, #54	; 0x36
 8000798:	e0c0      	b.n	800091c <read_keypad+0x2c4>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 800079a:	2101      	movs	r1, #1
 800079c:	4860      	ldr	r0, [pc, #384]	; (8000920 <read_keypad+0x2c8>)
 800079e:	f001 f97d 	bl	8001a9c <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d109      	bne.n	80007bc <read_keypad+0x164>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 80007a8:	bf00      	nop
 80007aa:	2101      	movs	r1, #1
 80007ac:	485c      	ldr	r0, [pc, #368]	; (8000920 <read_keypad+0x2c8>)
 80007ae:	f001 f975 	bl	8001a9c <HAL_GPIO_ReadPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d0f8      	beq.n	80007aa <read_keypad+0x152>
		return 'B';
 80007b8:	2342      	movs	r3, #66	; 0x42
 80007ba:	e0af      	b.n	800091c <read_keypad+0x2c4>
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 80007bc:	2201      	movs	r2, #1
 80007be:	2180      	movs	r1, #128	; 0x80
 80007c0:	4857      	ldr	r0, [pc, #348]	; (8000920 <read_keypad+0x2c8>)
 80007c2:	f001 f983 	bl	8001acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 80007c6:	2201      	movs	r2, #1
 80007c8:	2140      	movs	r1, #64	; 0x40
 80007ca:	4855      	ldr	r0, [pc, #340]	; (8000920 <read_keypad+0x2c8>)
 80007cc:	f001 f97e 	bl	8001acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);  // Pull the R3 High
 80007d0:	2200      	movs	r2, #0
 80007d2:	2120      	movs	r1, #32
 80007d4:	4852      	ldr	r0, [pc, #328]	; (8000920 <read_keypad+0x2c8>)
 80007d6:	f001 f979 	bl	8001acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 80007da:	2201      	movs	r2, #1
 80007dc:	2110      	movs	r1, #16
 80007de:	4850      	ldr	r0, [pc, #320]	; (8000920 <read_keypad+0x2c8>)
 80007e0:	f001 f974 	bl	8001acc <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 80007e4:	2108      	movs	r1, #8
 80007e6:	484e      	ldr	r0, [pc, #312]	; (8000920 <read_keypad+0x2c8>)
 80007e8:	f001 f958 	bl	8001a9c <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d109      	bne.n	8000806 <read_keypad+0x1ae>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 80007f2:	bf00      	nop
 80007f4:	2108      	movs	r1, #8
 80007f6:	484a      	ldr	r0, [pc, #296]	; (8000920 <read_keypad+0x2c8>)
 80007f8:	f001 f950 	bl	8001a9c <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d0f8      	beq.n	80007f4 <read_keypad+0x19c>
		return '7';
 8000802:	2337      	movs	r3, #55	; 0x37
 8000804:	e08a      	b.n	800091c <read_keypad+0x2c4>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 8000806:	2104      	movs	r1, #4
 8000808:	4845      	ldr	r0, [pc, #276]	; (8000920 <read_keypad+0x2c8>)
 800080a:	f001 f947 	bl	8001a9c <HAL_GPIO_ReadPin>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d109      	bne.n	8000828 <read_keypad+0x1d0>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 8000814:	bf00      	nop
 8000816:	2104      	movs	r1, #4
 8000818:	4841      	ldr	r0, [pc, #260]	; (8000920 <read_keypad+0x2c8>)
 800081a:	f001 f93f 	bl	8001a9c <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d0f8      	beq.n	8000816 <read_keypad+0x1be>
		return '8';
 8000824:	2338      	movs	r3, #56	; 0x38
 8000826:	e079      	b.n	800091c <read_keypad+0x2c4>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 8000828:	2102      	movs	r1, #2
 800082a:	483d      	ldr	r0, [pc, #244]	; (8000920 <read_keypad+0x2c8>)
 800082c:	f001 f936 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d109      	bne.n	800084a <read_keypad+0x1f2>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 8000836:	bf00      	nop
 8000838:	2102      	movs	r1, #2
 800083a:	4839      	ldr	r0, [pc, #228]	; (8000920 <read_keypad+0x2c8>)
 800083c:	f001 f92e 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0f8      	beq.n	8000838 <read_keypad+0x1e0>
		return '9';
 8000846:	2339      	movs	r3, #57	; 0x39
 8000848:	e068      	b.n	800091c <read_keypad+0x2c4>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 800084a:	2101      	movs	r1, #1
 800084c:	4834      	ldr	r0, [pc, #208]	; (8000920 <read_keypad+0x2c8>)
 800084e:	f001 f925 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d109      	bne.n	800086c <read_keypad+0x214>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8000858:	bf00      	nop
 800085a:	2101      	movs	r1, #1
 800085c:	4830      	ldr	r0, [pc, #192]	; (8000920 <read_keypad+0x2c8>)
 800085e:	f001 f91d 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d0f8      	beq.n	800085a <read_keypad+0x202>
		return 'C';
 8000868:	2343      	movs	r3, #67	; 0x43
 800086a:	e057      	b.n	800091c <read_keypad+0x2c4>
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 800086c:	2201      	movs	r2, #1
 800086e:	2180      	movs	r1, #128	; 0x80
 8000870:	482b      	ldr	r0, [pc, #172]	; (8000920 <read_keypad+0x2c8>)
 8000872:	f001 f92b 	bl	8001acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 8000876:	2201      	movs	r2, #1
 8000878:	2140      	movs	r1, #64	; 0x40
 800087a:	4829      	ldr	r0, [pc, #164]	; (8000920 <read_keypad+0x2c8>)
 800087c:	f001 f926 	bl	8001acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 8000880:	2201      	movs	r2, #1
 8000882:	2120      	movs	r1, #32
 8000884:	4826      	ldr	r0, [pc, #152]	; (8000920 <read_keypad+0x2c8>)
 8000886:	f001 f921 	bl	8001acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);  // Pull the R4 High
 800088a:	2200      	movs	r2, #0
 800088c:	2110      	movs	r1, #16
 800088e:	4824      	ldr	r0, [pc, #144]	; (8000920 <read_keypad+0x2c8>)
 8000890:	f001 f91c 	bl	8001acc <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 8000894:	2108      	movs	r1, #8
 8000896:	4822      	ldr	r0, [pc, #136]	; (8000920 <read_keypad+0x2c8>)
 8000898:	f001 f900 	bl	8001a9c <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d109      	bne.n	80008b6 <read_keypad+0x25e>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 80008a2:	bf00      	nop
 80008a4:	2108      	movs	r1, #8
 80008a6:	481e      	ldr	r0, [pc, #120]	; (8000920 <read_keypad+0x2c8>)
 80008a8:	f001 f8f8 	bl	8001a9c <HAL_GPIO_ReadPin>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0f8      	beq.n	80008a4 <read_keypad+0x24c>
		return '*';
 80008b2:	232a      	movs	r3, #42	; 0x2a
 80008b4:	e032      	b.n	800091c <read_keypad+0x2c4>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80008b6:	2104      	movs	r1, #4
 80008b8:	4819      	ldr	r0, [pc, #100]	; (8000920 <read_keypad+0x2c8>)
 80008ba:	f001 f8ef 	bl	8001a9c <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d109      	bne.n	80008d8 <read_keypad+0x280>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 80008c4:	bf00      	nop
 80008c6:	2104      	movs	r1, #4
 80008c8:	4815      	ldr	r0, [pc, #84]	; (8000920 <read_keypad+0x2c8>)
 80008ca:	f001 f8e7 	bl	8001a9c <HAL_GPIO_ReadPin>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d0f8      	beq.n	80008c6 <read_keypad+0x26e>
		return '0';
 80008d4:	2330      	movs	r3, #48	; 0x30
 80008d6:	e021      	b.n	800091c <read_keypad+0x2c4>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 80008d8:	2102      	movs	r1, #2
 80008da:	4811      	ldr	r0, [pc, #68]	; (8000920 <read_keypad+0x2c8>)
 80008dc:	f001 f8de 	bl	8001a9c <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d109      	bne.n	80008fa <read_keypad+0x2a2>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 80008e6:	bf00      	nop
 80008e8:	2102      	movs	r1, #2
 80008ea:	480d      	ldr	r0, [pc, #52]	; (8000920 <read_keypad+0x2c8>)
 80008ec:	f001 f8d6 	bl	8001a9c <HAL_GPIO_ReadPin>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0f8      	beq.n	80008e8 <read_keypad+0x290>
		return '#';
 80008f6:	2323      	movs	r3, #35	; 0x23
 80008f8:	e010      	b.n	800091c <read_keypad+0x2c4>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 80008fa:	2101      	movs	r1, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <read_keypad+0x2c8>)
 80008fe:	f001 f8cd 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d109      	bne.n	800091c <read_keypad+0x2c4>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8000908:	bf00      	nop
 800090a:	2101      	movs	r1, #1
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <read_keypad+0x2c8>)
 800090e:	f001 f8c5 	bl	8001a9c <HAL_GPIO_ReadPin>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f8      	beq.n	800090a <read_keypad+0x2b2>
		return 'D';
 8000918:	2344      	movs	r3, #68	; 0x44
 800091a:	e7ff      	b.n	800091c <read_keypad+0x2c4>
	}

}
 800091c:	4618      	mov	r0, r3
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40020000 	.word	0x40020000

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f000 fd78 	bl	800141c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 fa26 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f000 faec 	bl	8000f0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000934:	f000 fa8c 	bl	8000e50 <MX_I2C1_Init>
  MX_UART4_Init();
 8000938:	f000 fab8 	bl	8000eac <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800093c:	f7ff fe3a 	bl	80005b4 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	EntrySentence();
 8000940:	f000 fb82 	bl	8001048 <EntrySentence>

	if(QrFlag == 1){
 8000944:	4b99      	ldr	r3, [pc, #612]	; (8000bac <main+0x288>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b01      	cmp	r3, #1
 800094a:	f040 81bf 	bne.w	8000ccc <main+0x3a8>

		//İşlemler yapılırken yeni bir QR kodun gelip akışı bozmaması için interrupt kapatılır. İşlemler sonunda tekrar açılır.
		CLEAR_BIT(UART4->CR1, USART_CR1_RXNEIE);
 800094e:	4b98      	ldr	r3, [pc, #608]	; (8000bb0 <main+0x28c>)
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	4a97      	ldr	r2, [pc, #604]	; (8000bb0 <main+0x28c>)
 8000954:	f023 0320 	bic.w	r3, r3, #32
 8000958:	60d3      	str	r3, [r2, #12]
		//Başarıyla okunan Qr kodun giriş cümle fonksiyonu
		SuccesQrSentence();
 800095a:	f000 fb99 	bl	8001090 <SuccesQrSentence>

		do{
		//Keypad ile ürün seçimi
		do{
		Key = read_keypad ();
 800095e:	f7ff fe7b 	bl	8000658 <read_keypad>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	4b93      	ldr	r3, [pc, #588]	; (8000bb4 <main+0x290>)
 8000968:	701a      	strb	r2, [r3, #0]
		if (Key!=0x01)
 800096a:	4b92      	ldr	r3, [pc, #584]	; (8000bb4 <main+0x290>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d021      	beq.n	80009b6 <main+0x92>
			{
				if(cntKey == 3) //Lcd ekrana şifreyi sırayla girmek ve diziye kaydetmek için sayaç.
 8000972:	4b91      	ldr	r3, [pc, #580]	; (8000bb8 <main+0x294>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b03      	cmp	r3, #3
 8000978:	d102      	bne.n	8000980 <main+0x5c>
					cntKey = 0;
 800097a:	4b8f      	ldr	r3, [pc, #572]	; (8000bb8 <main+0x294>)
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
				lcd_send_cmd (0x80|(0x60+cntKey));
 8000980:	4b8d      	ldr	r3, [pc, #564]	; (8000bb8 <main+0x294>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	3360      	adds	r3, #96	; 0x60
 8000988:	b2db      	uxtb	r3, r3
 800098a:	b25b      	sxtb	r3, r3
 800098c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000990:	b25b      	sxtb	r3, r3
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fd97 	bl	80004c8 <lcd_send_cmd>
				lcd_send_data(Key);
 800099a:	4b86      	ldr	r3, [pc, #536]	; (8000bb4 <main+0x290>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fdc2 	bl	8000528 <lcd_send_data>
				SignificantKey[cntKey++] = Key;
 80009a4:	4b84      	ldr	r3, [pc, #528]	; (8000bb8 <main+0x294>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	4983      	ldr	r1, [pc, #524]	; (8000bb8 <main+0x294>)
 80009ac:	600a      	str	r2, [r1, #0]
 80009ae:	4a81      	ldr	r2, [pc, #516]	; (8000bb4 <main+0x290>)
 80009b0:	7811      	ldrb	r1, [r2, #0]
 80009b2:	4a82      	ldr	r2, [pc, #520]	; (8000bbc <main+0x298>)
 80009b4:	54d1      	strb	r1, [r2, r3]
			}
		}while(Key != '*' && cntKey != 3 ); //
 80009b6:	4b7f      	ldr	r3, [pc, #508]	; (8000bb4 <main+0x290>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b2a      	cmp	r3, #42	; 0x2a
 80009bc:	d003      	beq.n	80009c6 <main+0xa2>
 80009be:	4b7e      	ldr	r3, [pc, #504]	; (8000bb8 <main+0x294>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d1cb      	bne.n	800095e <main+0x3a>

		Key = atoi(SignificantKey); //Dizi içerisindeki int tam sayı değeri kaydediliyor.
 80009c6:	487d      	ldr	r0, [pc, #500]	; (8000bbc <main+0x298>)
 80009c8:	f002 fd06 	bl	80033d8 <atoi>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b78      	ldr	r3, [pc, #480]	; (8000bb4 <main+0x290>)
 80009d2:	701a      	strb	r2, [r3, #0]

		//SwitchCase yapısıyla motor hareket ettimek...
		switch(Key){
 80009d4:	4b77      	ldr	r3, [pc, #476]	; (8000bb4 <main+0x290>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	3b01      	subs	r3, #1
 80009da:	2b18      	cmp	r3, #24
 80009dc:	f200 8122 	bhi.w	8000c24 <main+0x300>
 80009e0:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <main+0xc4>)
 80009e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e6:	bf00      	nop
 80009e8:	08000a4d 	.word	0x08000a4d
 80009ec:	08000a5b 	.word	0x08000a5b
 80009f0:	08000a69 	.word	0x08000a69
 80009f4:	08000a77 	.word	0x08000a77
 80009f8:	08000a85 	.word	0x08000a85
 80009fc:	08000a93 	.word	0x08000a93
 8000a00:	08000aa1 	.word	0x08000aa1
 8000a04:	08000aaf 	.word	0x08000aaf
 8000a08:	08000abd 	.word	0x08000abd
 8000a0c:	08000acb 	.word	0x08000acb
 8000a10:	08000ad9 	.word	0x08000ad9
 8000a14:	08000ae7 	.word	0x08000ae7
 8000a18:	08000af5 	.word	0x08000af5
 8000a1c:	08000b03 	.word	0x08000b03
 8000a20:	08000b11 	.word	0x08000b11
 8000a24:	08000b1f 	.word	0x08000b1f
 8000a28:	08000b2d 	.word	0x08000b2d
 8000a2c:	08000b3b 	.word	0x08000b3b
 8000a30:	08000b49 	.word	0x08000b49
 8000a34:	08000b57 	.word	0x08000b57
 8000a38:	08000b65 	.word	0x08000b65
 8000a3c:	08000b73 	.word	0x08000b73
 8000a40:	08000b81 	.word	0x08000b81
 8000a44:	08000b8f 	.word	0x08000b8f
 8000a48:	08000b9d 	.word	0x08000b9d
		case 1:
			lcd_send_cmd (0x80|0x40);
 8000a4c:	20c0      	movs	r0, #192	; 0xc0
 8000a4e:	f7ff fd3b 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("1.MOTOR CALISTI");
 8000a52:	485b      	ldr	r0, [pc, #364]	; (8000bc0 <main+0x29c>)
 8000a54:	f7ff fdeb 	bl	800062e <lcd_send_string>
			break;
 8000a58:	e115      	b.n	8000c86 <main+0x362>
		case 2:
			lcd_send_cmd (0x80|0x40);
 8000a5a:	20c0      	movs	r0, #192	; 0xc0
 8000a5c:	f7ff fd34 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("2.MOTOR CALISTI");
 8000a60:	4858      	ldr	r0, [pc, #352]	; (8000bc4 <main+0x2a0>)
 8000a62:	f7ff fde4 	bl	800062e <lcd_send_string>
			break;
 8000a66:	e10e      	b.n	8000c86 <main+0x362>
		case 3:
			lcd_send_cmd (0x80|0x40);
 8000a68:	20c0      	movs	r0, #192	; 0xc0
 8000a6a:	f7ff fd2d 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("3.MOTOR CALISTI");
 8000a6e:	4856      	ldr	r0, [pc, #344]	; (8000bc8 <main+0x2a4>)
 8000a70:	f7ff fddd 	bl	800062e <lcd_send_string>
			break;
 8000a74:	e107      	b.n	8000c86 <main+0x362>
		case 4:
			lcd_send_cmd (0x80|0x40);
 8000a76:	20c0      	movs	r0, #192	; 0xc0
 8000a78:	f7ff fd26 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("4.MOTOR CALISTI");
 8000a7c:	4853      	ldr	r0, [pc, #332]	; (8000bcc <main+0x2a8>)
 8000a7e:	f7ff fdd6 	bl	800062e <lcd_send_string>
			break;
 8000a82:	e100      	b.n	8000c86 <main+0x362>
		case 5:
			lcd_send_cmd (0x80|0x40);
 8000a84:	20c0      	movs	r0, #192	; 0xc0
 8000a86:	f7ff fd1f 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("5.MOTOR CALISTI");
 8000a8a:	4851      	ldr	r0, [pc, #324]	; (8000bd0 <main+0x2ac>)
 8000a8c:	f7ff fdcf 	bl	800062e <lcd_send_string>
			break;
 8000a90:	e0f9      	b.n	8000c86 <main+0x362>
		case 6:
			lcd_send_cmd (0x80|0x40);
 8000a92:	20c0      	movs	r0, #192	; 0xc0
 8000a94:	f7ff fd18 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("6.MOTOR CALISTI");
 8000a98:	484e      	ldr	r0, [pc, #312]	; (8000bd4 <main+0x2b0>)
 8000a9a:	f7ff fdc8 	bl	800062e <lcd_send_string>
			break;
 8000a9e:	e0f2      	b.n	8000c86 <main+0x362>
		case 7:
			lcd_send_cmd (0x80|0x40);
 8000aa0:	20c0      	movs	r0, #192	; 0xc0
 8000aa2:	f7ff fd11 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("7.MOTOR CALISTI");
 8000aa6:	484c      	ldr	r0, [pc, #304]	; (8000bd8 <main+0x2b4>)
 8000aa8:	f7ff fdc1 	bl	800062e <lcd_send_string>
			break;
 8000aac:	e0eb      	b.n	8000c86 <main+0x362>
		case 8:
			lcd_send_cmd (0x80|0x40);
 8000aae:	20c0      	movs	r0, #192	; 0xc0
 8000ab0:	f7ff fd0a 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("8.MOTOR CALISTI");
 8000ab4:	4849      	ldr	r0, [pc, #292]	; (8000bdc <main+0x2b8>)
 8000ab6:	f7ff fdba 	bl	800062e <lcd_send_string>
			break;
 8000aba:	e0e4      	b.n	8000c86 <main+0x362>
		case 9:
			lcd_send_cmd (0x80|0x40);
 8000abc:	20c0      	movs	r0, #192	; 0xc0
 8000abe:	f7ff fd03 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("9.MOTOR CALISTI");
 8000ac2:	4847      	ldr	r0, [pc, #284]	; (8000be0 <main+0x2bc>)
 8000ac4:	f7ff fdb3 	bl	800062e <lcd_send_string>
			break;
 8000ac8:	e0dd      	b.n	8000c86 <main+0x362>
		case 10:
			lcd_send_cmd (0x80|0x40);
 8000aca:	20c0      	movs	r0, #192	; 0xc0
 8000acc:	f7ff fcfc 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("10.MOTOR CALISTI");
 8000ad0:	4844      	ldr	r0, [pc, #272]	; (8000be4 <main+0x2c0>)
 8000ad2:	f7ff fdac 	bl	800062e <lcd_send_string>
			break;
 8000ad6:	e0d6      	b.n	8000c86 <main+0x362>
		case 11:
			lcd_send_cmd (0x80|0x40);
 8000ad8:	20c0      	movs	r0, #192	; 0xc0
 8000ada:	f7ff fcf5 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("11.MOTOR CALISTI");
 8000ade:	4842      	ldr	r0, [pc, #264]	; (8000be8 <main+0x2c4>)
 8000ae0:	f7ff fda5 	bl	800062e <lcd_send_string>
			break;
 8000ae4:	e0cf      	b.n	8000c86 <main+0x362>
		case 12:
			lcd_send_cmd (0x80|0x40);
 8000ae6:	20c0      	movs	r0, #192	; 0xc0
 8000ae8:	f7ff fcee 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("12.MOTOR CALISTI");
 8000aec:	483f      	ldr	r0, [pc, #252]	; (8000bec <main+0x2c8>)
 8000aee:	f7ff fd9e 	bl	800062e <lcd_send_string>
			break;
 8000af2:	e0c8      	b.n	8000c86 <main+0x362>
		case 13:
			lcd_send_cmd (0x80|0x40);
 8000af4:	20c0      	movs	r0, #192	; 0xc0
 8000af6:	f7ff fce7 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("13.MOTOR CALISTI");
 8000afa:	483d      	ldr	r0, [pc, #244]	; (8000bf0 <main+0x2cc>)
 8000afc:	f7ff fd97 	bl	800062e <lcd_send_string>
			break;
 8000b00:	e0c1      	b.n	8000c86 <main+0x362>
		case 14:
			lcd_send_cmd (0x80|0x40);
 8000b02:	20c0      	movs	r0, #192	; 0xc0
 8000b04:	f7ff fce0 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("14.MOTOR CALISTI");
 8000b08:	483a      	ldr	r0, [pc, #232]	; (8000bf4 <main+0x2d0>)
 8000b0a:	f7ff fd90 	bl	800062e <lcd_send_string>
			break;
 8000b0e:	e0ba      	b.n	8000c86 <main+0x362>
		case 15:
			lcd_send_cmd (0x80|0x40);
 8000b10:	20c0      	movs	r0, #192	; 0xc0
 8000b12:	f7ff fcd9 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("15.MOTOR CALISTI");
 8000b16:	4838      	ldr	r0, [pc, #224]	; (8000bf8 <main+0x2d4>)
 8000b18:	f7ff fd89 	bl	800062e <lcd_send_string>
			break;
 8000b1c:	e0b3      	b.n	8000c86 <main+0x362>
		case 16:
			lcd_send_cmd (0x80|0x40);
 8000b1e:	20c0      	movs	r0, #192	; 0xc0
 8000b20:	f7ff fcd2 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("16.MOTOR CALISTI");
 8000b24:	4835      	ldr	r0, [pc, #212]	; (8000bfc <main+0x2d8>)
 8000b26:	f7ff fd82 	bl	800062e <lcd_send_string>
			break;
 8000b2a:	e0ac      	b.n	8000c86 <main+0x362>
		case 17:
			lcd_send_cmd (0x80|0x40);
 8000b2c:	20c0      	movs	r0, #192	; 0xc0
 8000b2e:	f7ff fccb 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("17.MOTOR CALISTI");
 8000b32:	4833      	ldr	r0, [pc, #204]	; (8000c00 <main+0x2dc>)
 8000b34:	f7ff fd7b 	bl	800062e <lcd_send_string>
			break;
 8000b38:	e0a5      	b.n	8000c86 <main+0x362>
		case 18:
			lcd_send_cmd (0x80|0x40);
 8000b3a:	20c0      	movs	r0, #192	; 0xc0
 8000b3c:	f7ff fcc4 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("18.MOTOR CALISTI");
 8000b40:	4830      	ldr	r0, [pc, #192]	; (8000c04 <main+0x2e0>)
 8000b42:	f7ff fd74 	bl	800062e <lcd_send_string>
			break;
 8000b46:	e09e      	b.n	8000c86 <main+0x362>
		case 19:
			lcd_send_cmd (0x80|0x40);
 8000b48:	20c0      	movs	r0, #192	; 0xc0
 8000b4a:	f7ff fcbd 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("19.MOTOR CALISTI");
 8000b4e:	482e      	ldr	r0, [pc, #184]	; (8000c08 <main+0x2e4>)
 8000b50:	f7ff fd6d 	bl	800062e <lcd_send_string>
			break;
 8000b54:	e097      	b.n	8000c86 <main+0x362>
		case 20:
			lcd_send_cmd (0x80|0x40);
 8000b56:	20c0      	movs	r0, #192	; 0xc0
 8000b58:	f7ff fcb6 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("20.MOTOR CALISTI");
 8000b5c:	482b      	ldr	r0, [pc, #172]	; (8000c0c <main+0x2e8>)
 8000b5e:	f7ff fd66 	bl	800062e <lcd_send_string>
			break;
 8000b62:	e090      	b.n	8000c86 <main+0x362>
		case 21:
			lcd_send_cmd (0x80|0x40);
 8000b64:	20c0      	movs	r0, #192	; 0xc0
 8000b66:	f7ff fcaf 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("21.MOTOR CALISTI");
 8000b6a:	4829      	ldr	r0, [pc, #164]	; (8000c10 <main+0x2ec>)
 8000b6c:	f7ff fd5f 	bl	800062e <lcd_send_string>
			break;
 8000b70:	e089      	b.n	8000c86 <main+0x362>
		case 22:
			lcd_send_cmd (0x80|0x40);
 8000b72:	20c0      	movs	r0, #192	; 0xc0
 8000b74:	f7ff fca8 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("22.MOTOR CALISTI");
 8000b78:	4826      	ldr	r0, [pc, #152]	; (8000c14 <main+0x2f0>)
 8000b7a:	f7ff fd58 	bl	800062e <lcd_send_string>
			break;
 8000b7e:	e082      	b.n	8000c86 <main+0x362>
		case 23:
			lcd_send_cmd (0x80|0x40);
 8000b80:	20c0      	movs	r0, #192	; 0xc0
 8000b82:	f7ff fca1 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("23.MOTOR CALISTI");
 8000b86:	4824      	ldr	r0, [pc, #144]	; (8000c18 <main+0x2f4>)
 8000b88:	f7ff fd51 	bl	800062e <lcd_send_string>
			break;
 8000b8c:	e07b      	b.n	8000c86 <main+0x362>
		case 24:
			lcd_send_cmd (0x80|0x40);
 8000b8e:	20c0      	movs	r0, #192	; 0xc0
 8000b90:	f7ff fc9a 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("24.MOTOR CALISTI");
 8000b94:	4821      	ldr	r0, [pc, #132]	; (8000c1c <main+0x2f8>)
 8000b96:	f7ff fd4a 	bl	800062e <lcd_send_string>
			break;
 8000b9a:	e074      	b.n	8000c86 <main+0x362>
		case 25:
			lcd_send_cmd (0x80|0x40);
 8000b9c:	20c0      	movs	r0, #192	; 0xc0
 8000b9e:	f7ff fc93 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("25.MOTOR CALISTI");
 8000ba2:	481f      	ldr	r0, [pc, #124]	; (8000c20 <main+0x2fc>)
 8000ba4:	f7ff fd43 	bl	800062e <lcd_send_string>
			break;
 8000ba8:	e06d      	b.n	8000c86 <main+0x362>
 8000baa:	bf00      	nop
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	40004c00 	.word	0x40004c00
 8000bb4:	200002ac 	.word	0x200002ac
 8000bb8:	20000200 	.word	0x20000200
 8000bbc:	20000268 	.word	0x20000268
 8000bc0:	080035dc 	.word	0x080035dc
 8000bc4:	080035ec 	.word	0x080035ec
 8000bc8:	080035fc 	.word	0x080035fc
 8000bcc:	0800360c 	.word	0x0800360c
 8000bd0:	0800361c 	.word	0x0800361c
 8000bd4:	0800362c 	.word	0x0800362c
 8000bd8:	0800363c 	.word	0x0800363c
 8000bdc:	0800364c 	.word	0x0800364c
 8000be0:	0800365c 	.word	0x0800365c
 8000be4:	0800366c 	.word	0x0800366c
 8000be8:	08003680 	.word	0x08003680
 8000bec:	08003694 	.word	0x08003694
 8000bf0:	080036a8 	.word	0x080036a8
 8000bf4:	080036bc 	.word	0x080036bc
 8000bf8:	080036d0 	.word	0x080036d0
 8000bfc:	080036e4 	.word	0x080036e4
 8000c00:	080036f8 	.word	0x080036f8
 8000c04:	0800370c 	.word	0x0800370c
 8000c08:	08003720 	.word	0x08003720
 8000c0c:	08003734 	.word	0x08003734
 8000c10:	08003748 	.word	0x08003748
 8000c14:	0800375c 	.word	0x0800375c
 8000c18:	08003770 	.word	0x08003770
 8000c1c:	08003784 	.word	0x08003784
 8000c20:	08003798 	.word	0x08003798
		default:
			Key = 0, cntKey = 0;
 8000c24:	4b46      	ldr	r3, [pc, #280]	; (8000d40 <main+0x41c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	4b46      	ldr	r3, [pc, #280]	; (8000d44 <main+0x420>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
			lcd_clear();
 8000c30:	f7ff fcaa 	bl	8000588 <lcd_clear>
			lcd_send_cmd (0x80|0x40);
 8000c34:	20c0      	movs	r0, #192	; 0xc0
 8000c36:	f7ff fc47 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("Hatali Giris!");
 8000c3a:	4843      	ldr	r0, [pc, #268]	; (8000d48 <main+0x424>)
 8000c3c:	f7ff fcf7 	bl	800062e <lcd_send_string>

			lcd_send_cmd (0x80|0x14);
 8000c40:	2094      	movs	r0, #148	; 0x94
 8000c42:	f7ff fc41 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("  Tekrar Giriniz...  ");
 8000c46:	4841      	ldr	r0, [pc, #260]	; (8000d4c <main+0x428>)
 8000c48:	f7ff fcf1 	bl	800062e <lcd_send_string>
			HAL_Delay(2000);
 8000c4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c50:	f000 fc56 	bl	8001500 <HAL_Delay>

			lcd_send_cmd (0x80|0x00);
 8000c54:	2080      	movs	r0, #128	; 0x80
 8000c56:	f7ff fc37 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("  Urun No yazarak-  ");
 8000c5a:	483d      	ldr	r0, [pc, #244]	; (8000d50 <main+0x42c>)
 8000c5c:	f7ff fce7 	bl	800062e <lcd_send_string>

			lcd_send_cmd (0x80|0x40);
 8000c60:	20c0      	movs	r0, #192	; 0xc0
 8000c62:	f7ff fc31 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("sonuna * koyunuz.");
 8000c66:	483b      	ldr	r0, [pc, #236]	; (8000d54 <main+0x430>)
 8000c68:	f7ff fce1 	bl	800062e <lcd_send_string>

			lcd_send_cmd (0x80|0x14);
 8000c6c:	2094      	movs	r0, #148	; 0x94
 8000c6e:	f7ff fc2b 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("   Ornek:  12*   ");
 8000c72:	4839      	ldr	r0, [pc, #228]	; (8000d58 <main+0x434>)
 8000c74:	f7ff fcdb 	bl	800062e <lcd_send_string>

			lcd_send_cmd (0x80|0x54);
 8000c78:	20d4      	movs	r0, #212	; 0xd4
 8000c7a:	f7ff fc25 	bl	80004c8 <lcd_send_cmd>
			lcd_send_string("URUN NO:");
 8000c7e:	4837      	ldr	r0, [pc, #220]	; (8000d5c <main+0x438>)
 8000c80:	f7ff fcd5 	bl	800062e <lcd_send_string>
			break;
 8000c84:	bf00      	nop
		}}while(!(Key>0 && Key<26));
 8000c86:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <main+0x41c>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f43f ae67 	beq.w	800095e <main+0x3a>
 8000c90:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <main+0x41c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b19      	cmp	r3, #25
 8000c96:	f63f ae62 	bhi.w	800095e <main+0x3a>

		Key = 0, cntKey = 0, cnt = 0, QrFlag = 3;
 8000c9a:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <main+0x41c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <main+0x420>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <main+0x43c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <main+0x440>)
 8000cae:	2203      	movs	r2, #3
 8000cb0:	601a      	str	r2, [r3, #0]
		HAL_Delay(5000);
 8000cb2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cb6:	f000 fc23 	bl	8001500 <HAL_Delay>
		//memset(SignificantKey, 0, sizeof(SignificantKey));
		lcd_clear();
 8000cba:	f7ff fc65 	bl	8000588 <lcd_clear>
		SET_BIT(UART4->CR1, USART_CR1_RXNEIE);
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <main+0x444>)
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	4a29      	ldr	r2, [pc, #164]	; (8000d68 <main+0x444>)
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	60d3      	str	r3, [r2, #12]
 8000cca:	e639      	b.n	8000940 <main+0x1c>
	}

	else if(QrFlag == 0 && timer== 0){ //Verilerin alımı bitmeden buraya girmemesi için timer koyuldu.
 8000ccc:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <main+0x440>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f47f ae35 	bne.w	8000940 <main+0x1c>
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <main+0x448>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f47f ae30 	bne.w	8000940 <main+0x1c>
		CLEAR_BIT(UART4->CR1, USART_CR1_RXNEIE);
 8000ce0:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <main+0x444>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	4a20      	ldr	r2, [pc, #128]	; (8000d68 <main+0x444>)
 8000ce6:	f023 0320 	bic.w	r3, r3, #32
 8000cea:	60d3      	str	r3, [r2, #12]
		lcd_clear();
 8000cec:	f7ff fc4c 	bl	8000588 <lcd_clear>

		lcd_send_cmd (0x80|0x40);
 8000cf0:	20c0      	movs	r0, #192	; 0xc0
 8000cf2:	f7ff fbe9 	bl	80004c8 <lcd_send_cmd>
		lcd_send_string("QrCode tanimlaniyor...");
 8000cf6:	481e      	ldr	r0, [pc, #120]	; (8000d70 <main+0x44c>)
 8000cf8:	f7ff fc99 	bl	800062e <lcd_send_string>
		HAL_Delay(3000);
 8000cfc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d00:	f000 fbfe 	bl	8001500 <HAL_Delay>

		lcd_send_cmd (0x80|0x40);
 8000d04:	20c0      	movs	r0, #192	; 0xc0
 8000d06:	f7ff fbdf 	bl	80004c8 <lcd_send_cmd>
		lcd_send_string("   QR KOD HATALI   ");
 8000d0a:	481a      	ldr	r0, [pc, #104]	; (8000d74 <main+0x450>)
 8000d0c:	f7ff fc8f 	bl	800062e <lcd_send_string>

		lcd_send_cmd (0x80|0x14);
 8000d10:	2094      	movs	r0, #148	; 0x94
 8000d12:	f7ff fbd9 	bl	80004c8 <lcd_send_cmd>
		lcd_send_string("Tekrar Deneyiniz.");
 8000d16:	4818      	ldr	r0, [pc, #96]	; (8000d78 <main+0x454>)
 8000d18:	f7ff fc89 	bl	800062e <lcd_send_string>


		HAL_Delay(3000);
 8000d1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d20:	f000 fbee 	bl	8001500 <HAL_Delay>
		cnt = 0, QrFlag = 3;
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <main+0x43c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <main+0x440>)
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	601a      	str	r2, [r3, #0]
		SET_BIT(UART4->CR1, USART_CR1_RXNEIE);
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <main+0x444>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <main+0x444>)
 8000d36:	f043 0320 	orr.w	r3, r3, #32
 8000d3a:	60d3      	str	r3, [r2, #12]
	EntrySentence();
 8000d3c:	e600      	b.n	8000940 <main+0x1c>
 8000d3e:	bf00      	nop
 8000d40:	200002ac 	.word	0x200002ac
 8000d44:	20000200 	.word	0x20000200
 8000d48:	080037ac 	.word	0x080037ac
 8000d4c:	080037bc 	.word	0x080037bc
 8000d50:	080037d4 	.word	0x080037d4
 8000d54:	080037ec 	.word	0x080037ec
 8000d58:	08003800 	.word	0x08003800
 8000d5c:	08003814 	.word	0x08003814
 8000d60:	20000260 	.word	0x20000260
 8000d64:	20000000 	.word	0x20000000
 8000d68:	40004c00 	.word	0x40004c00
 8000d6c:	20000208 	.word	0x20000208
 8000d70:	08003820 	.word	0x08003820
 8000d74:	08003838 	.word	0x08003838
 8000d78:	0800384c 	.word	0x0800384c

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b094      	sub	sp, #80	; 0x50
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	2230      	movs	r2, #48	; 0x30
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fb4c 	bl	8003428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <SystemClock_Config+0xcc>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <SystemClock_Config+0xcc>)
 8000daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <SystemClock_Config+0xcc>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <SystemClock_Config+0xd0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <SystemClock_Config+0xd0>)
 8000dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <SystemClock_Config+0xd0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de2:	2302      	movs	r3, #2
 8000de4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dec:	2304      	movs	r3, #4
 8000dee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000df0:	23a8      	movs	r3, #168	; 0xa8
 8000df2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfc:	f107 0320 	add.w	r3, r7, #32
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 fabd 	bl	8002380 <HAL_RCC_OscConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e0c:	f000 f97e 	bl	800110c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e10:	230f      	movs	r3, #15
 8000e12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e14:	2302      	movs	r3, #2
 8000e16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2105      	movs	r1, #5
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 fd16 	bl	8002860 <HAL_RCC_ClockConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e3a:	f000 f967 	bl	800110c <Error_Handler>
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3750      	adds	r7, #80	; 0x50
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40007000 	.word	0x40007000

08000e50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e56:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <MX_I2C1_Init+0x54>)
 8000e58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e5c:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <MX_I2C1_Init+0x58>)
 8000e5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e8e:	f000 fe37 	bl	8001b00 <HAL_I2C_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e98:	f000 f938 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2000020c 	.word	0x2000020c
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	000186a0 	.word	0x000186a0

08000eac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_UART4_Init+0x58>)
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <MX_UART4_Init+0x5c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_UART4_Init+0x58>)
 8000eb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ebc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_UART4_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_UART4_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_UART4_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_UART4_Init+0x58>)
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_UART4_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_UART4_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ee2:	4808      	ldr	r0, [pc, #32]	; (8000f04 <MX_UART4_Init+0x58>)
 8000ee4:	f001 feae 	bl	8002c44 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000eee:	f000 f90d 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* Enable UART Receive Data Register Not Empty */
  SET_BIT(UART4->CR1, USART_CR1_RXNEIE);
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <MX_UART4_Init+0x5c>)
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <MX_UART4_Init+0x5c>)
 8000ef8:	f043 0320 	orr.w	r3, r3, #32
 8000efc:	60d3      	str	r3, [r2, #12]



  /* USER CODE END UART4_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000026c 	.word	0x2000026c
 8000f08:	40004c00 	.word	0x40004c00

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b44      	ldr	r3, [pc, #272]	; (8001038 <MX_GPIO_Init+0x12c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a43      	ldr	r2, [pc, #268]	; (8001038 <MX_GPIO_Init+0x12c>)
 8000f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b41      	ldr	r3, [pc, #260]	; (8001038 <MX_GPIO_Init+0x12c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <MX_GPIO_Init+0x12c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a3c      	ldr	r2, [pc, #240]	; (8001038 <MX_GPIO_Init+0x12c>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <MX_GPIO_Init+0x12c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	4b36      	ldr	r3, [pc, #216]	; (8001038 <MX_GPIO_Init+0x12c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a35      	ldr	r2, [pc, #212]	; (8001038 <MX_GPIO_Init+0x12c>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b33      	ldr	r3, [pc, #204]	; (8001038 <MX_GPIO_Init+0x12c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <MX_GPIO_Init+0x12c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a2e      	ldr	r2, [pc, #184]	; (8001038 <MX_GPIO_Init+0x12c>)
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <MX_GPIO_Init+0x12c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	4b28      	ldr	r3, [pc, #160]	; (8001038 <MX_GPIO_Init+0x12c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a27      	ldr	r2, [pc, #156]	; (8001038 <MX_GPIO_Init+0x12c>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b25      	ldr	r3, [pc, #148]	; (8001038 <MX_GPIO_Init+0x12c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	21f0      	movs	r1, #240	; 0xf0
 8000fb2:	4822      	ldr	r0, [pc, #136]	; (800103c <MX_GPIO_Init+0x130>)
 8000fb4:	f000 fd8a 	bl	8001acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000fbe:	4820      	ldr	r0, [pc, #128]	; (8001040 <MX_GPIO_Init+0x134>)
 8000fc0:	f000 fd84 	bl	8001acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481b      	ldr	r0, [pc, #108]	; (8001044 <MX_GPIO_Init+0x138>)
 8000fd8:	f000 fbc6 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fdc:	230f      	movs	r3, #15
 8000fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4813      	ldr	r0, [pc, #76]	; (800103c <MX_GPIO_Init+0x130>)
 8000ff0:	f000 fbba 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ff4:	23f0      	movs	r3, #240	; 0xf0
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <MX_GPIO_Init+0x130>)
 800100c:	f000 fbac 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001010:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_GPIO_Init+0x134>)
 800102a:	f000 fb9d 	bl	8001768 <HAL_GPIO_Init>

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40020800 	.word	0x40020800

08001048 <EntrySentence>:
		if(HAL_I2C_IsDeviceReady(&hi2c1,adres,1,100) == HAL_OK)
			break;
	}
}

void EntrySentence(){
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80|0x00);
 800104c:	2080      	movs	r0, #128	; 0x80
 800104e:	f7ff fa3b 	bl	80004c8 <lcd_send_cmd>
	lcd_send_string("Hosgeldiniz!");
 8001052:	480b      	ldr	r0, [pc, #44]	; (8001080 <EntrySentence+0x38>)
 8001054:	f7ff faeb 	bl	800062e <lcd_send_string>
	lcd_send_cmd (0x80|0x40);
 8001058:	20c0      	movs	r0, #192	; 0xc0
 800105a:	f7ff fa35 	bl	80004c8 <lcd_send_cmd>
	lcd_send_string("Hediye icin Barkod");
 800105e:	4809      	ldr	r0, [pc, #36]	; (8001084 <EntrySentence+0x3c>)
 8001060:	f7ff fae5 	bl	800062e <lcd_send_string>
	lcd_send_cmd (0x80|0x14);
 8001064:	2094      	movs	r0, #148	; 0x94
 8001066:	f7ff fa2f 	bl	80004c8 <lcd_send_cmd>
	lcd_send_string("okutunuz. Urun almak");
 800106a:	4807      	ldr	r0, [pc, #28]	; (8001088 <EntrySentence+0x40>)
 800106c:	f7ff fadf 	bl	800062e <lcd_send_string>
	lcd_send_cmd (0x80|0x54);
 8001070:	20d4      	movs	r0, #212	; 0xd4
 8001072:	f7ff fa29 	bl	80004c8 <lcd_send_cmd>
	lcd_send_string("icin TL atiniz.");
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <EntrySentence+0x44>)
 8001078:	f7ff fad9 	bl	800062e <lcd_send_string>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	08003860 	.word	0x08003860
 8001084:	08003870 	.word	0x08003870
 8001088:	08003884 	.word	0x08003884
 800108c:	0800389c 	.word	0x0800389c

08001090 <SuccesQrSentence>:

void SuccesQrSentence(){
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	lcd_clear();
 8001094:	f7ff fa78 	bl	8000588 <lcd_clear>

	lcd_send_cmd (0x80|0x40);
 8001098:	20c0      	movs	r0, #192	; 0xc0
 800109a:	f7ff fa15 	bl	80004c8 <lcd_send_cmd>
	lcd_send_string("QrCode tanimlaniyor...");
 800109e:	4815      	ldr	r0, [pc, #84]	; (80010f4 <SuccesQrSentence+0x64>)
 80010a0:	f7ff fac5 	bl	800062e <lcd_send_string>
	HAL_Delay(2000);
 80010a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010a8:	f000 fa2a 	bl	8001500 <HAL_Delay>

	lcd_send_cmd (0x80|0x40);
 80010ac:	20c0      	movs	r0, #192	; 0xc0
 80010ae:	f7ff fa0b 	bl	80004c8 <lcd_send_cmd>
	lcd_send_string("QR Kod tanimlandi...");
 80010b2:	4811      	ldr	r0, [pc, #68]	; (80010f8 <SuccesQrSentence+0x68>)
 80010b4:	f7ff fabb 	bl	800062e <lcd_send_string>
	HAL_Delay(2000);
 80010b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010bc:	f000 fa20 	bl	8001500 <HAL_Delay>


	lcd_send_cmd (0x80|0x00);
 80010c0:	2080      	movs	r0, #128	; 0x80
 80010c2:	f7ff fa01 	bl	80004c8 <lcd_send_cmd>
	lcd_send_string("  Urun No yazarak-  ");
 80010c6:	480d      	ldr	r0, [pc, #52]	; (80010fc <SuccesQrSentence+0x6c>)
 80010c8:	f7ff fab1 	bl	800062e <lcd_send_string>

	lcd_send_cmd (0x80|0x40);
 80010cc:	20c0      	movs	r0, #192	; 0xc0
 80010ce:	f7ff f9fb 	bl	80004c8 <lcd_send_cmd>
	lcd_send_string("sonuna * koyunuz.");
 80010d2:	480b      	ldr	r0, [pc, #44]	; (8001100 <SuccesQrSentence+0x70>)
 80010d4:	f7ff faab 	bl	800062e <lcd_send_string>

	lcd_send_cmd (0x80|0x14);
 80010d8:	2094      	movs	r0, #148	; 0x94
 80010da:	f7ff f9f5 	bl	80004c8 <lcd_send_cmd>
	lcd_send_string("   Ornek:  12*   ");
 80010de:	4809      	ldr	r0, [pc, #36]	; (8001104 <SuccesQrSentence+0x74>)
 80010e0:	f7ff faa5 	bl	800062e <lcd_send_string>

	lcd_send_cmd (0x80|0x54);
 80010e4:	20d4      	movs	r0, #212	; 0xd4
 80010e6:	f7ff f9ef 	bl	80004c8 <lcd_send_cmd>
	lcd_send_string("URUN NO:");
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <SuccesQrSentence+0x78>)
 80010ec:	f7ff fa9f 	bl	800062e <lcd_send_string>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	08003820 	.word	0x08003820
 80010f8:	080038ac 	.word	0x080038ac
 80010fc:	080037d4 	.word	0x080037d4
 8001100:	080037ec 	.word	0x080037ec
 8001104:	08003800 	.word	0x08003800
 8001108:	08003814 	.word	0x08003814

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001112:	e7fe      	b.n	8001112 <Error_Handler+0x6>

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <HAL_MspInit+0x4c>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_MspInit+0x4c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_MspInit+0x4c>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_MspInit+0x4c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <HAL_I2C_MspInit+0x84>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d12b      	bne.n	80011de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_I2C_MspInit+0x88>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_I2C_MspInit+0x88>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_I2C_MspInit+0x88>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011a2:	23c0      	movs	r3, #192	; 0xc0
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a6:	2312      	movs	r3, #18
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011b2:	2304      	movs	r3, #4
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <HAL_I2C_MspInit+0x8c>)
 80011be:	f000 fad3 	bl	8001768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_I2C_MspInit+0x88>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_I2C_MspInit+0x88>)
 80011cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_I2C_MspInit+0x88>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011de:	bf00      	nop
 80011e0:	3728      	adds	r7, #40	; 0x28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40005400 	.word	0x40005400
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400

080011f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <HAL_UART_MspInit+0x94>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d134      	bne.n	8001280 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <HAL_UART_MspInit+0x98>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a1b      	ldr	r2, [pc, #108]	; (800128c <HAL_UART_MspInit+0x98>)
 8001220:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_UART_MspInit+0x98>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_UART_MspInit+0x98>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a14      	ldr	r2, [pc, #80]	; (800128c <HAL_UART_MspInit+0x98>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_UART_MspInit+0x98>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800124e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001258:	2301      	movs	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001260:	2308      	movs	r3, #8
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4809      	ldr	r0, [pc, #36]	; (8001290 <HAL_UART_MspInit+0x9c>)
 800126c:	f000 fa7c 	bl	8001768 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2101      	movs	r1, #1
 8001274:	2034      	movs	r0, #52	; 0x34
 8001276:	f000 fa40 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800127a:	2034      	movs	r0, #52	; 0x34
 800127c:	f000 fa59 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	; 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40004c00 	.word	0x40004c00
 800128c:	40023800 	.word	0x40023800
 8001290:	40020800 	.word	0x40020800

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timer >0)
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <SysTick_Handler+0x20>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	dd04      	ble.n	80012f2 <SysTick_Handler+0x16>
		timer--;
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SysTick_Handler+0x20>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4a03      	ldr	r2, [pc, #12]	; (80012fc <SysTick_Handler+0x20>)
 80012f0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f2:	f000 f8e5 	bl	80014c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000208 	.word	0x20000208

08001300 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	timer = 10; //10 ms
 8001306:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <UART4_IRQHandler+0x80>)
 8001308:	220a      	movs	r2, #10
 800130a:	601a      	str	r2, [r3, #0]
	uint32_t isrflags = UART4->SR;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <UART4_IRQHandler+0x84>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	607b      	str	r3, [r7, #4]
	uint32_t control_reg1 = UART4->CR1;
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <UART4_IRQHandler+0x84>)
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	603b      	str	r3, [r7, #0]
	if(((isrflags & USART_SR_RXNE) != RESET) && ((control_reg1 & USART_CR1_RXNEIE) !=RESET )){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0320 	and.w	r3, r3, #32
 800131e:	2b00      	cmp	r3, #0
 8001320:	d02a      	beq.n	8001378 <UART4_IRQHandler+0x78>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f003 0320 	and.w	r3, r3, #32
 8001328:	2b00      	cmp	r3, #0
 800132a:	d025      	beq.n	8001378 <UART4_IRQHandler+0x78>
		QrBuffer[cnt++] = (char) UART4->DR;
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <UART4_IRQHandler+0x84>)
 800132e:	6858      	ldr	r0, [r3, #4]
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <UART4_IRQHandler+0x88>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	4914      	ldr	r1, [pc, #80]	; (8001388 <UART4_IRQHandler+0x88>)
 8001338:	600a      	str	r2, [r1, #0]
 800133a:	b2c1      	uxtb	r1, r0
 800133c:	4a13      	ldr	r2, [pc, #76]	; (800138c <UART4_IRQHandler+0x8c>)
 800133e:	54d1      	strb	r1, [r2, r3]
		if(cnt == LEN ){
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <UART4_IRQHandler+0x88>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d102      	bne.n	800134e <UART4_IRQHandler+0x4e>
			cnt = 0;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <UART4_IRQHandler+0x88>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
		}
		ret = strncmp(QrBuffer, cp1, 15);
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <UART4_IRQHandler+0x90>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	220f      	movs	r2, #15
 8001354:	4619      	mov	r1, r3
 8001356:	480d      	ldr	r0, [pc, #52]	; (800138c <UART4_IRQHandler+0x8c>)
 8001358:	f002 f86e 	bl	8003438 <strncmp>
 800135c:	4602      	mov	r2, r0
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <UART4_IRQHandler+0x94>)
 8001360:	601a      	str	r2, [r3, #0]
		if(ret == 0){
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <UART4_IRQHandler+0x94>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d103      	bne.n	8001372 <UART4_IRQHandler+0x72>
			QrFlag = 1;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <UART4_IRQHandler+0x98>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]
  /* USER CODE END UART4_IRQn 0 */
  //HAL_UART_IRQHandler(&huart4);
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001370:	e002      	b.n	8001378 <UART4_IRQHandler+0x78>
			QrFlag = 0;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <UART4_IRQHandler+0x98>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000208 	.word	0x20000208
 8001384:	40004c00 	.word	0x40004c00
 8001388:	20000260 	.word	0x20000260
 800138c:	200002b0 	.word	0x200002b0
 8001390:	20000004 	.word	0x20000004
 8001394:	200002c0 	.word	0x200002c0
 8001398:	20000000 	.word	0x20000000

0800139c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <SystemInit+0x28>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a6:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <SystemInit+0x28>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <SystemInit+0x28>)
 80013b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013b6:	609a      	str	r2, [r3, #8]
#endif
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001400 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013ce:	e003      	b.n	80013d8 <LoopCopyDataInit>

080013d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013d6:	3104      	adds	r1, #4

080013d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013d8:	480b      	ldr	r0, [pc, #44]	; (8001408 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013e0:	d3f6      	bcc.n	80013d0 <CopyDataInit>
  ldr  r2, =_sbss
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013e4:	e002      	b.n	80013ec <LoopFillZerobss>

080013e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013e8:	f842 3b04 	str.w	r3, [r2], #4

080013ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013f0:	d3f9      	bcc.n	80013e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013f2:	f7ff ffd3 	bl	800139c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013f6:	f001 fff3 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fa:	f7ff fa93 	bl	8000924 <main>
  bx  lr    
 80013fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001400:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001404:	08003a08 	.word	0x08003a08
  ldr  r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800140c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001410:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001414:	200002c8 	.word	0x200002c8

08001418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC_IRQHandler>
	...

0800141c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0d      	ldr	r2, [pc, #52]	; (800145c <HAL_Init+0x40>)
 8001426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_Init+0x40>)
 8001432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <HAL_Init+0x40>)
 800143e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001444:	2003      	movs	r0, #3
 8001446:	f000 f94d 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144a:	2000      	movs	r0, #0
 800144c:	f000 f808 	bl	8001460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001450:	f7ff fe60 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023c00 	.word	0x40023c00

08001460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x54>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x58>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001476:	fbb3 f3f1 	udiv	r3, r3, r1
 800147a:	fbb2 f3f3 	udiv	r3, r2, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f965 	bl	800174e <HAL_SYSTICK_Config>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e00e      	b.n	80014ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d80a      	bhi.n	80014aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f000 f92d 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a0:	4a06      	ldr	r2, [pc, #24]	; (80014bc <HAL_InitTick+0x5c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e000      	b.n	80014ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000008 	.word	0x20000008
 80014b8:	20000010 	.word	0x20000010
 80014bc:	2000000c 	.word	0x2000000c

080014c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x20>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x24>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_IncTick+0x24>)
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000010 	.word	0x20000010
 80014e4:	200002c4 	.word	0x200002c4

080014e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return uwTick;
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_GetTick+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200002c4 	.word	0x200002c4

08001500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff ffee 	bl	80014e8 <HAL_GetTick>
 800150c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	d005      	beq.n	8001526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_Delay+0x40>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001526:	bf00      	nop
 8001528:	f7ff ffde 	bl	80014e8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	429a      	cmp	r2, r3
 8001536:	d8f7      	bhi.n	8001528 <HAL_Delay+0x28>
  {
  }
}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000010 	.word	0x20000010

08001544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0b      	blt.n	80015d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <__NVIC_EnableIRQ+0x38>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	; (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	; (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff8e 	bl	80015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff29 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff3e 	bl	800158c <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff8e 	bl	8001638 <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5d 	bl	80015e4 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff31 	bl	80015a8 <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffa2 	bl	80016a0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	e16b      	b.n	8001a5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001784:	2201      	movs	r2, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	429a      	cmp	r2, r3
 800179e:	f040 815a 	bne.w	8001a56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d00b      	beq.n	80017c2 <HAL_GPIO_Init+0x5a>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d007      	beq.n	80017c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b6:	2b11      	cmp	r3, #17
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b12      	cmp	r3, #18
 80017c0:	d130      	bne.n	8001824 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	2203      	movs	r2, #3
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f8:	2201      	movs	r2, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 0201 	and.w	r2, r3, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0xfc>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b12      	cmp	r3, #18
 8001862:	d123      	bne.n	80018ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	08da      	lsrs	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3208      	adds	r2, #8
 800186c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	220f      	movs	r2, #15
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	08da      	lsrs	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3208      	adds	r2, #8
 80018a6:	69b9      	ldr	r1, [r7, #24]
 80018a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0203 	and.w	r2, r3, #3
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80b4 	beq.w	8001a56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <HAL_GPIO_Init+0x308>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	4a5e      	ldr	r2, [pc, #376]	; (8001a70 <HAL_GPIO_Init+0x308>)
 80018f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fc:	6453      	str	r3, [r2, #68]	; 0x44
 80018fe:	4b5c      	ldr	r3, [pc, #368]	; (8001a70 <HAL_GPIO_Init+0x308>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800190a:	4a5a      	ldr	r2, [pc, #360]	; (8001a74 <HAL_GPIO_Init+0x30c>)
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	089b      	lsrs	r3, r3, #2
 8001910:	3302      	adds	r3, #2
 8001912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	220f      	movs	r2, #15
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a51      	ldr	r2, [pc, #324]	; (8001a78 <HAL_GPIO_Init+0x310>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d02b      	beq.n	800198e <HAL_GPIO_Init+0x226>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a50      	ldr	r2, [pc, #320]	; (8001a7c <HAL_GPIO_Init+0x314>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d025      	beq.n	800198a <HAL_GPIO_Init+0x222>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4f      	ldr	r2, [pc, #316]	; (8001a80 <HAL_GPIO_Init+0x318>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d01f      	beq.n	8001986 <HAL_GPIO_Init+0x21e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4e      	ldr	r2, [pc, #312]	; (8001a84 <HAL_GPIO_Init+0x31c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d019      	beq.n	8001982 <HAL_GPIO_Init+0x21a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4d      	ldr	r2, [pc, #308]	; (8001a88 <HAL_GPIO_Init+0x320>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_GPIO_Init+0x216>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4c      	ldr	r2, [pc, #304]	; (8001a8c <HAL_GPIO_Init+0x324>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d00d      	beq.n	800197a <HAL_GPIO_Init+0x212>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4b      	ldr	r2, [pc, #300]	; (8001a90 <HAL_GPIO_Init+0x328>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d007      	beq.n	8001976 <HAL_GPIO_Init+0x20e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4a      	ldr	r2, [pc, #296]	; (8001a94 <HAL_GPIO_Init+0x32c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_GPIO_Init+0x20a>
 800196e:	2307      	movs	r3, #7
 8001970:	e00e      	b.n	8001990 <HAL_GPIO_Init+0x228>
 8001972:	2308      	movs	r3, #8
 8001974:	e00c      	b.n	8001990 <HAL_GPIO_Init+0x228>
 8001976:	2306      	movs	r3, #6
 8001978:	e00a      	b.n	8001990 <HAL_GPIO_Init+0x228>
 800197a:	2305      	movs	r3, #5
 800197c:	e008      	b.n	8001990 <HAL_GPIO_Init+0x228>
 800197e:	2304      	movs	r3, #4
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x228>
 8001982:	2303      	movs	r3, #3
 8001984:	e004      	b.n	8001990 <HAL_GPIO_Init+0x228>
 8001986:	2302      	movs	r3, #2
 8001988:	e002      	b.n	8001990 <HAL_GPIO_Init+0x228>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <HAL_GPIO_Init+0x228>
 800198e:	2300      	movs	r3, #0
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	f002 0203 	and.w	r2, r2, #3
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	4093      	lsls	r3, r2
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a0:	4934      	ldr	r1, [pc, #208]	; (8001a74 <HAL_GPIO_Init+0x30c>)
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ae:	4b3a      	ldr	r3, [pc, #232]	; (8001a98 <HAL_GPIO_Init+0x330>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019d2:	4a31      	ldr	r2, [pc, #196]	; (8001a98 <HAL_GPIO_Init+0x330>)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019d8:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <HAL_GPIO_Init+0x330>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019fc:	4a26      	ldr	r2, [pc, #152]	; (8001a98 <HAL_GPIO_Init+0x330>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <HAL_GPIO_Init+0x330>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a26:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <HAL_GPIO_Init+0x330>)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_GPIO_Init+0x330>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a50:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <HAL_GPIO_Init+0x330>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	61fb      	str	r3, [r7, #28]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	2b0f      	cmp	r3, #15
 8001a60:	f67f ae90 	bls.w	8001784 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a64:	bf00      	nop
 8001a66:	3724      	adds	r7, #36	; 0x24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40013800 	.word	0x40013800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020c00 	.word	0x40020c00
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40021400 	.word	0x40021400
 8001a90:	40021800 	.word	0x40021800
 8001a94:	40021c00 	.word	0x40021c00
 8001a98:	40013c00 	.word	0x40013c00

08001a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	887b      	ldrh	r3, [r7, #2]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	e001      	b.n	8001abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001adc:	787b      	ldrb	r3, [r7, #1]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ae8:	e003      	b.n	8001af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	041a      	lsls	r2, r3, #16
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	619a      	str	r2, [r3, #24]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e11f      	b.n	8001d52 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff fb1c 	bl	8001164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2224      	movs	r2, #36	; 0x24
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0201 	bic.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b64:	f001 f846 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 8001b68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4a7b      	ldr	r2, [pc, #492]	; (8001d5c <HAL_I2C_Init+0x25c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d807      	bhi.n	8001b84 <HAL_I2C_Init+0x84>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4a7a      	ldr	r2, [pc, #488]	; (8001d60 <HAL_I2C_Init+0x260>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	bf94      	ite	ls
 8001b7c:	2301      	movls	r3, #1
 8001b7e:	2300      	movhi	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	e006      	b.n	8001b92 <HAL_I2C_Init+0x92>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4a77      	ldr	r2, [pc, #476]	; (8001d64 <HAL_I2C_Init+0x264>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	bf94      	ite	ls
 8001b8c:	2301      	movls	r3, #1
 8001b8e:	2300      	movhi	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e0db      	b.n	8001d52 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4a72      	ldr	r2, [pc, #456]	; (8001d68 <HAL_I2C_Init+0x268>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	0c9b      	lsrs	r3, r3, #18
 8001ba4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4a64      	ldr	r2, [pc, #400]	; (8001d5c <HAL_I2C_Init+0x25c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d802      	bhi.n	8001bd4 <HAL_I2C_Init+0xd4>
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	e009      	b.n	8001be8 <HAL_I2C_Init+0xe8>
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	4a63      	ldr	r2, [pc, #396]	; (8001d6c <HAL_I2C_Init+0x26c>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	099b      	lsrs	r3, r3, #6
 8001be6:	3301      	adds	r3, #1
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	430b      	orrs	r3, r1
 8001bee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4956      	ldr	r1, [pc, #344]	; (8001d5c <HAL_I2C_Init+0x25c>)
 8001c04:	428b      	cmp	r3, r1
 8001c06:	d80d      	bhi.n	8001c24 <HAL_I2C_Init+0x124>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1e59      	subs	r1, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	bf38      	it	cc
 8001c20:	2304      	movcc	r3, #4
 8001c22:	e04f      	b.n	8001cc4 <HAL_I2C_Init+0x1c4>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d111      	bne.n	8001c50 <HAL_I2C_Init+0x150>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1e58      	subs	r0, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	440b      	add	r3, r1
 8001c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf0c      	ite	eq
 8001c48:	2301      	moveq	r3, #1
 8001c4a:	2300      	movne	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	e012      	b.n	8001c76 <HAL_I2C_Init+0x176>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1e58      	subs	r0, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	0099      	lsls	r1, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c66:	3301      	adds	r3, #1
 8001c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf0c      	ite	eq
 8001c70:	2301      	moveq	r3, #1
 8001c72:	2300      	movne	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_I2C_Init+0x17e>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e022      	b.n	8001cc4 <HAL_I2C_Init+0x1c4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10e      	bne.n	8001ca4 <HAL_I2C_Init+0x1a4>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1e58      	subs	r0, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6859      	ldr	r1, [r3, #4]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	440b      	add	r3, r1
 8001c94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca2:	e00f      	b.n	8001cc4 <HAL_I2C_Init+0x1c4>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1e58      	subs	r0, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6859      	ldr	r1, [r3, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	0099      	lsls	r1, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	6809      	ldr	r1, [r1, #0]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69da      	ldr	r2, [r3, #28]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6911      	ldr	r1, [r2, #16]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68d2      	ldr	r2, [r2, #12]
 8001cfe:	4311      	orrs	r1, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	430b      	orrs	r3, r1
 8001d06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	000186a0 	.word	0x000186a0
 8001d60:	001e847f 	.word	0x001e847f
 8001d64:	003d08ff 	.word	0x003d08ff
 8001d68:	431bde83 	.word	0x431bde83
 8001d6c:	10624dd3 	.word	0x10624dd3

08001d70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	817b      	strh	r3, [r7, #10]
 8001d80:	4613      	mov	r3, r2
 8001d82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d84:	f7ff fbb0 	bl	80014e8 <HAL_GetTick>
 8001d88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	f040 80e0 	bne.w	8001f58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2319      	movs	r3, #25
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4970      	ldr	r1, [pc, #448]	; (8001f64 <HAL_I2C_Master_Transmit+0x1f4>)
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f964 	bl	8002070 <I2C_WaitOnFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001dae:	2302      	movs	r3, #2
 8001db0:	e0d3      	b.n	8001f5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_I2C_Master_Transmit+0x50>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e0cc      	b.n	8001f5a <HAL_I2C_Master_Transmit+0x1ea>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d007      	beq.n	8001de6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f042 0201 	orr.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001df4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2221      	movs	r2, #33	; 0x21
 8001dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2210      	movs	r2, #16
 8001e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	893a      	ldrh	r2, [r7, #8]
 8001e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4a50      	ldr	r2, [pc, #320]	; (8001f68 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e28:	8979      	ldrh	r1, [r7, #10]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	6a3a      	ldr	r2, [r7, #32]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f89c 	bl	8001f6c <I2C_MasterRequestWrite>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e08d      	b.n	8001f5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e54:	e066      	b.n	8001f24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	6a39      	ldr	r1, [r7, #32]
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f9de 	bl	800221c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00d      	beq.n	8001e82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d107      	bne.n	8001e7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e06b      	b.n	8001f5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	781a      	ldrb	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d11b      	bne.n	8001ef8 <HAL_I2C_Master_Transmit+0x188>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d017      	beq.n	8001ef8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	6a39      	ldr	r1, [r7, #32]
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 f9ce 	bl	800229e <I2C_WaitOnBTFFlagUntilTimeout>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00d      	beq.n	8001f24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d107      	bne.n	8001f20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e01a      	b.n	8001f5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d194      	bne.n	8001e56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e000      	b.n	8001f5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f58:	2302      	movs	r3, #2
  }
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	00100002 	.word	0x00100002
 8001f68:	ffff0000 	.word	0xffff0000

08001f6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d006      	beq.n	8001f96 <I2C_MasterRequestWrite+0x2a>
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d003      	beq.n	8001f96 <I2C_MasterRequestWrite+0x2a>
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f94:	d108      	bne.n	8001fa8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	e00b      	b.n	8001fc0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	2b12      	cmp	r3, #18
 8001fae:	d107      	bne.n	8001fc0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 f84f 	bl	8002070 <I2C_WaitOnFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00d      	beq.n	8001ff4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe6:	d103      	bne.n	8001ff0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e035      	b.n	8002060 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ffc:	d108      	bne.n	8002010 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ffe:	897b      	ldrh	r3, [r7, #10]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800200c:	611a      	str	r2, [r3, #16]
 800200e:	e01b      	b.n	8002048 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002010:	897b      	ldrh	r3, [r7, #10]
 8002012:	11db      	asrs	r3, r3, #7
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f003 0306 	and.w	r3, r3, #6
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f063 030f 	orn	r3, r3, #15
 8002020:	b2da      	uxtb	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	490e      	ldr	r1, [pc, #56]	; (8002068 <I2C_MasterRequestWrite+0xfc>)
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f875 	bl	800211e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e010      	b.n	8002060 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800203e:	897b      	ldrh	r3, [r7, #10]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4907      	ldr	r1, [pc, #28]	; (800206c <I2C_MasterRequestWrite+0x100>)
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 f865 	bl	800211e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	00010008 	.word	0x00010008
 800206c:	00010002 	.word	0x00010002

08002070 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002080:	e025      	b.n	80020ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002088:	d021      	beq.n	80020ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208a:	f7ff fa2d 	bl	80014e8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d302      	bcc.n	80020a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d116      	bne.n	80020ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2220      	movs	r2, #32
 80020aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f043 0220 	orr.w	r2, r3, #32
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e023      	b.n	8002116 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	0c1b      	lsrs	r3, r3, #16
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d10d      	bne.n	80020f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	43da      	mvns	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4013      	ands	r3, r2
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	e00c      	b.n	800210e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4013      	ands	r3, r2
 8002100:	b29b      	uxth	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	429a      	cmp	r2, r3
 8002112:	d0b6      	beq.n	8002082 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800212c:	e051      	b.n	80021d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800213c:	d123      	bne.n	8002186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002156:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f043 0204 	orr.w	r2, r3, #4
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e046      	b.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d021      	beq.n	80021d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218e:	f7ff f9ab 	bl	80014e8 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	d302      	bcc.n	80021a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d116      	bne.n	80021d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f043 0220 	orr.w	r2, r3, #32
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e020      	b.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d10c      	bne.n	80021f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4013      	ands	r3, r2
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf14      	ite	ne
 80021ee:	2301      	movne	r3, #1
 80021f0:	2300      	moveq	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	e00b      	b.n	800220e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	43da      	mvns	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	4013      	ands	r3, r2
 8002202:	b29b      	uxth	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d18d      	bne.n	800212e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002228:	e02d      	b.n	8002286 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f878 	bl	8002320 <I2C_IsAcknowledgeFailed>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e02d      	b.n	8002296 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d021      	beq.n	8002286 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002242:	f7ff f951 	bl	80014e8 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	429a      	cmp	r2, r3
 8002250:	d302      	bcc.n	8002258 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d116      	bne.n	8002286 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f043 0220 	orr.w	r2, r3, #32
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e007      	b.n	8002296 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002290:	2b80      	cmp	r3, #128	; 0x80
 8002292:	d1ca      	bne.n	800222a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022aa:	e02d      	b.n	8002308 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f837 	bl	8002320 <I2C_IsAcknowledgeFailed>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e02d      	b.n	8002318 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c2:	d021      	beq.n	8002308 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c4:	f7ff f910 	bl	80014e8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d302      	bcc.n	80022da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d116      	bne.n	8002308 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f043 0220 	orr.w	r2, r3, #32
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e007      	b.n	8002318 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b04      	cmp	r3, #4
 8002314:	d1ca      	bne.n	80022ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002336:	d11b      	bne.n	8002370 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002340:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	f043 0204 	orr.w	r2, r3, #4
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e25b      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d075      	beq.n	800248a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800239e:	4ba3      	ldr	r3, [pc, #652]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d00c      	beq.n	80023c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023aa:	4ba0      	ldr	r3, [pc, #640]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d112      	bne.n	80023dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b6:	4b9d      	ldr	r3, [pc, #628]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023c2:	d10b      	bne.n	80023dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	4b99      	ldr	r3, [pc, #612]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d05b      	beq.n	8002488 <HAL_RCC_OscConfig+0x108>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d157      	bne.n	8002488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e236      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e4:	d106      	bne.n	80023f4 <HAL_RCC_OscConfig+0x74>
 80023e6:	4b91      	ldr	r3, [pc, #580]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a90      	ldr	r2, [pc, #576]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e01d      	b.n	8002430 <HAL_RCC_OscConfig+0xb0>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x98>
 80023fe:	4b8b      	ldr	r3, [pc, #556]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a8a      	ldr	r2, [pc, #552]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 8002404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b88      	ldr	r3, [pc, #544]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a87      	ldr	r2, [pc, #540]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e00b      	b.n	8002430 <HAL_RCC_OscConfig+0xb0>
 8002418:	4b84      	ldr	r3, [pc, #528]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a83      	ldr	r2, [pc, #524]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 800241e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b81      	ldr	r3, [pc, #516]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a80      	ldr	r2, [pc, #512]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 800242a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff f856 	bl	80014e8 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002440:	f7ff f852 	bl	80014e8 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e1fb      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002452:	4b76      	ldr	r3, [pc, #472]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0xc0>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7ff f842 	bl	80014e8 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002468:	f7ff f83e 	bl	80014e8 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e1e7      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247a:	4b6c      	ldr	r3, [pc, #432]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0xe8>
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d063      	beq.n	800255e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002496:	4b65      	ldr	r3, [pc, #404]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a2:	4b62      	ldr	r3, [pc, #392]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d11c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ae:	4b5f      	ldr	r3, [pc, #380]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d116      	bne.n	80024e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	4b5c      	ldr	r3, [pc, #368]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_RCC_OscConfig+0x152>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e1bb      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d2:	4b56      	ldr	r3, [pc, #344]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4952      	ldr	r1, [pc, #328]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e6:	e03a      	b.n	800255e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f0:	4b4f      	ldr	r3, [pc, #316]	; (8002630 <HAL_RCC_OscConfig+0x2b0>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe fff7 	bl	80014e8 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fe:	f7fe fff3 	bl	80014e8 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e19c      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002510:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b43      	ldr	r3, [pc, #268]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4940      	ldr	r1, [pc, #256]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002532:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_RCC_OscConfig+0x2b0>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe ffd6 	bl	80014e8 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002540:	f7fe ffd2 	bl	80014e8 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e17b      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002552:	4b36      	ldr	r3, [pc, #216]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d030      	beq.n	80025cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002572:	4b30      	ldr	r3, [pc, #192]	; (8002634 <HAL_RCC_OscConfig+0x2b4>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002578:	f7fe ffb6 	bl	80014e8 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002580:	f7fe ffb2 	bl	80014e8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e15b      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 8002594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x200>
 800259e:	e015      	b.n	80025cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a0:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_RCC_OscConfig+0x2b4>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a6:	f7fe ff9f 	bl	80014e8 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ae:	f7fe ff9b 	bl	80014e8 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e144      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80025c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80a0 	beq.w	800271a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025de:	4b13      	ldr	r3, [pc, #76]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10f      	bne.n	800260a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a0e      	ldr	r2, [pc, #56]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002606:	2301      	movs	r3, #1
 8002608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCC_OscConfig+0x2b8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d121      	bne.n	800265a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <HAL_RCC_OscConfig+0x2b8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a07      	ldr	r2, [pc, #28]	; (8002638 <HAL_RCC_OscConfig+0x2b8>)
 800261c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002622:	f7fe ff61 	bl	80014e8 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	e011      	b.n	800264e <HAL_RCC_OscConfig+0x2ce>
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	42470000 	.word	0x42470000
 8002634:	42470e80 	.word	0x42470e80
 8002638:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263c:	f7fe ff54 	bl	80014e8 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e0fd      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264e:	4b81      	ldr	r3, [pc, #516]	; (8002854 <HAL_RCC_OscConfig+0x4d4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d106      	bne.n	8002670 <HAL_RCC_OscConfig+0x2f0>
 8002662:	4b7d      	ldr	r3, [pc, #500]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	4a7c      	ldr	r2, [pc, #496]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6713      	str	r3, [r2, #112]	; 0x70
 800266e:	e01c      	b.n	80026aa <HAL_RCC_OscConfig+0x32a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b05      	cmp	r3, #5
 8002676:	d10c      	bne.n	8002692 <HAL_RCC_OscConfig+0x312>
 8002678:	4b77      	ldr	r3, [pc, #476]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	4a76      	ldr	r2, [pc, #472]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6713      	str	r3, [r2, #112]	; 0x70
 8002684:	4b74      	ldr	r3, [pc, #464]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	4a73      	ldr	r2, [pc, #460]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6713      	str	r3, [r2, #112]	; 0x70
 8002690:	e00b      	b.n	80026aa <HAL_RCC_OscConfig+0x32a>
 8002692:	4b71      	ldr	r3, [pc, #452]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	4a70      	ldr	r2, [pc, #448]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6713      	str	r3, [r2, #112]	; 0x70
 800269e:	4b6e      	ldr	r3, [pc, #440]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	4a6d      	ldr	r2, [pc, #436]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d015      	beq.n	80026de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b2:	f7fe ff19 	bl	80014e8 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe ff15 	bl	80014e8 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0bc      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	4b61      	ldr	r3, [pc, #388]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ee      	beq.n	80026ba <HAL_RCC_OscConfig+0x33a>
 80026dc:	e014      	b.n	8002708 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026de:	f7fe ff03 	bl	80014e8 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7fe feff 	bl	80014e8 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e0a6      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	4b56      	ldr	r3, [pc, #344]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ee      	bne.n	80026e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b52      	ldr	r3, [pc, #328]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a51      	ldr	r2, [pc, #324]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 8002714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8092 	beq.w	8002848 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002724:	4b4c      	ldr	r3, [pc, #304]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d05c      	beq.n	80027ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d141      	bne.n	80027bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002738:	4b48      	ldr	r3, [pc, #288]	; (800285c <HAL_RCC_OscConfig+0x4dc>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe fed3 	bl	80014e8 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002746:	f7fe fecf 	bl	80014e8 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e078      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002758:	4b3f      	ldr	r3, [pc, #252]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69da      	ldr	r2, [r3, #28]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	019b      	lsls	r3, r3, #6
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	085b      	lsrs	r3, r3, #1
 800277c:	3b01      	subs	r3, #1
 800277e:	041b      	lsls	r3, r3, #16
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002786:	061b      	lsls	r3, r3, #24
 8002788:	4933      	ldr	r1, [pc, #204]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800278e:	4b33      	ldr	r3, [pc, #204]	; (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fea8 	bl	80014e8 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279c:	f7fe fea4 	bl	80014e8 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e04d      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x41c>
 80027ba:	e045      	b.n	8002848 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <HAL_RCC_OscConfig+0x4dc>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7fe fe91 	bl	80014e8 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ca:	f7fe fe8d 	bl	80014e8 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e036      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x44a>
 80027e8:	e02e      	b.n	8002848 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e029      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027f6:	4b18      	ldr	r3, [pc, #96]	; (8002858 <HAL_RCC_OscConfig+0x4d8>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	429a      	cmp	r2, r3
 8002808:	d11c      	bne.n	8002844 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d115      	bne.n	8002844 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800281e:	4013      	ands	r3, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002824:	4293      	cmp	r3, r2
 8002826:	d10d      	bne.n	8002844 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d106      	bne.n	8002844 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40007000 	.word	0x40007000
 8002858:	40023800 	.word	0x40023800
 800285c:	42470060 	.word	0x42470060

08002860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0cc      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002874:	4b68      	ldr	r3, [pc, #416]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d90c      	bls.n	800289c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b65      	ldr	r3, [pc, #404]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b63      	ldr	r3, [pc, #396]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0b8      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d020      	beq.n	80028ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b4:	4b59      	ldr	r3, [pc, #356]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4a58      	ldr	r2, [pc, #352]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a52      	ldr	r2, [pc, #328]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d8:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	494d      	ldr	r1, [pc, #308]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d044      	beq.n	8002980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d119      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e07f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d003      	beq.n	800291e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291a:	2b03      	cmp	r3, #3
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291e:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e06f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292e:	4b3b      	ldr	r3, [pc, #236]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e067      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293e:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f023 0203 	bic.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4934      	ldr	r1, [pc, #208]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	4313      	orrs	r3, r2
 800294e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002950:	f7fe fdca 	bl	80014e8 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	e00a      	b.n	800296e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002958:	f7fe fdc6 	bl	80014e8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e04f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 020c 	and.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	429a      	cmp	r2, r3
 800297e:	d1eb      	bne.n	8002958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002980:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d20c      	bcs.n	80029a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e032      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4916      	ldr	r1, [pc, #88]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	490e      	ldr	r1, [pc, #56]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029e6:	f000 f821 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 80029ea:	4601      	mov	r1, r0
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	5cd3      	ldrb	r3, [r2, r3]
 80029fa:	fa21 f303 	lsr.w	r3, r1, r3
 80029fe:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fd2a 	bl	8001460 <HAL_InitTick>

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023c00 	.word	0x40023c00
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	080038d4 	.word	0x080038d4
 8002a24:	20000008 	.word	0x20000008
 8002a28:	2000000c 	.word	0x2000000c

08002a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a42:	4b63      	ldr	r3, [pc, #396]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d007      	beq.n	8002a5e <HAL_RCC_GetSysClockFreq+0x32>
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d008      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x38>
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 80b4 	bne.w	8002bc0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b5e      	ldr	r3, [pc, #376]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a5a:	60bb      	str	r3, [r7, #8]
       break;
 8002a5c:	e0b3      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a5e:	4b5e      	ldr	r3, [pc, #376]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002a60:	60bb      	str	r3, [r7, #8]
      break;
 8002a62:	e0b0      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a64:	4b5a      	ldr	r3, [pc, #360]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a6e:	4b58      	ldr	r3, [pc, #352]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d04a      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7a:	4b55      	ldr	r3, [pc, #340]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	099b      	lsrs	r3, r3, #6
 8002a80:	f04f 0400 	mov.w	r4, #0
 8002a84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	ea03 0501 	and.w	r5, r3, r1
 8002a90:	ea04 0602 	and.w	r6, r4, r2
 8002a94:	4629      	mov	r1, r5
 8002a96:	4632      	mov	r2, r6
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	f04f 0400 	mov.w	r4, #0
 8002aa0:	0154      	lsls	r4, r2, #5
 8002aa2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002aa6:	014b      	lsls	r3, r1, #5
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4622      	mov	r2, r4
 8002aac:	1b49      	subs	r1, r1, r5
 8002aae:	eb62 0206 	sbc.w	r2, r2, r6
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	f04f 0400 	mov.w	r4, #0
 8002aba:	0194      	lsls	r4, r2, #6
 8002abc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ac0:	018b      	lsls	r3, r1, #6
 8002ac2:	1a5b      	subs	r3, r3, r1
 8002ac4:	eb64 0402 	sbc.w	r4, r4, r2
 8002ac8:	f04f 0100 	mov.w	r1, #0
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	00e2      	lsls	r2, r4, #3
 8002ad2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ad6:	00d9      	lsls	r1, r3, #3
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4614      	mov	r4, r2
 8002adc:	195b      	adds	r3, r3, r5
 8002ade:	eb44 0406 	adc.w	r4, r4, r6
 8002ae2:	f04f 0100 	mov.w	r1, #0
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	0262      	lsls	r2, r4, #9
 8002aec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002af0:	0259      	lsls	r1, r3, #9
 8002af2:	460b      	mov	r3, r1
 8002af4:	4614      	mov	r4, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	4621      	mov	r1, r4
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f04f 0400 	mov.w	r4, #0
 8002b00:	461a      	mov	r2, r3
 8002b02:	4623      	mov	r3, r4
 8002b04:	f7fd fb60 	bl	80001c8 <__aeabi_uldivmod>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	e049      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b10:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	f04f 0400 	mov.w	r4, #0
 8002b1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	ea03 0501 	and.w	r5, r3, r1
 8002b26:	ea04 0602 	and.w	r6, r4, r2
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	4632      	mov	r2, r6
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	f04f 0400 	mov.w	r4, #0
 8002b36:	0154      	lsls	r4, r2, #5
 8002b38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b3c:	014b      	lsls	r3, r1, #5
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4622      	mov	r2, r4
 8002b42:	1b49      	subs	r1, r1, r5
 8002b44:	eb62 0206 	sbc.w	r2, r2, r6
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	f04f 0400 	mov.w	r4, #0
 8002b50:	0194      	lsls	r4, r2, #6
 8002b52:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b56:	018b      	lsls	r3, r1, #6
 8002b58:	1a5b      	subs	r3, r3, r1
 8002b5a:	eb64 0402 	sbc.w	r4, r4, r2
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	00e2      	lsls	r2, r4, #3
 8002b68:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b6c:	00d9      	lsls	r1, r3, #3
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4614      	mov	r4, r2
 8002b72:	195b      	adds	r3, r3, r5
 8002b74:	eb44 0406 	adc.w	r4, r4, r6
 8002b78:	f04f 0100 	mov.w	r1, #0
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	02a2      	lsls	r2, r4, #10
 8002b82:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b86:	0299      	lsls	r1, r3, #10
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4614      	mov	r4, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	4621      	mov	r1, r4
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f04f 0400 	mov.w	r4, #0
 8002b96:	461a      	mov	r2, r3
 8002b98:	4623      	mov	r3, r4
 8002b9a:	f7fd fb15 	bl	80001c8 <__aeabi_uldivmod>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	460c      	mov	r4, r1
 8002ba2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ba4:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	0c1b      	lsrs	r3, r3, #16
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	60bb      	str	r3, [r7, #8]
      break;
 8002bbe:	e002      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bc0:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002bc2:	60bb      	str	r3, [r7, #8]
      break;
 8002bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	00f42400 	.word	0x00f42400
 8002bd8:	007a1200 	.word	0x007a1200

08002bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000008 	.word	0x20000008

08002bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bf8:	f7ff fff0 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002bfc:	4601      	mov	r1, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	0a9b      	lsrs	r3, r3, #10
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4a03      	ldr	r2, [pc, #12]	; (8002c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c0a:	5cd3      	ldrb	r3, [r2, r3]
 8002c0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40023800 	.word	0x40023800
 8002c18:	080038e4 	.word	0x080038e4

08002c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c20:	f7ff ffdc 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002c24:	4601      	mov	r1, r0
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	0b5b      	lsrs	r3, r3, #13
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	4a03      	ldr	r2, [pc, #12]	; (8002c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c32:	5cd3      	ldrb	r3, [r2, r3]
 8002c34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	080038e4 	.word	0x080038e4

08002c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e03f      	b.n	8002cd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fe fac2 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2224      	movs	r2, #36	; 0x24
 8002c74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f829 	bl	8002ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ce4:	b085      	sub	sp, #20
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d22:	f023 030c 	bic.w	r3, r3, #12
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	68f9      	ldr	r1, [r7, #12]
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d4e:	f040 818b 	bne.w	8003068 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4ac1      	ldr	r2, [pc, #772]	; (800305c <UART_SetConfig+0x37c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d005      	beq.n	8002d68 <UART_SetConfig+0x88>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4abf      	ldr	r2, [pc, #764]	; (8003060 <UART_SetConfig+0x380>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	f040 80bd 	bne.w	8002ee2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d68:	f7ff ff58 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 8002d6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	461d      	mov	r5, r3
 8002d72:	f04f 0600 	mov.w	r6, #0
 8002d76:	46a8      	mov	r8, r5
 8002d78:	46b1      	mov	r9, r6
 8002d7a:	eb18 0308 	adds.w	r3, r8, r8
 8002d7e:	eb49 0409 	adc.w	r4, r9, r9
 8002d82:	4698      	mov	r8, r3
 8002d84:	46a1      	mov	r9, r4
 8002d86:	eb18 0805 	adds.w	r8, r8, r5
 8002d8a:	eb49 0906 	adc.w	r9, r9, r6
 8002d8e:	f04f 0100 	mov.w	r1, #0
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002da2:	4688      	mov	r8, r1
 8002da4:	4691      	mov	r9, r2
 8002da6:	eb18 0005 	adds.w	r0, r8, r5
 8002daa:	eb49 0106 	adc.w	r1, r9, r6
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	461d      	mov	r5, r3
 8002db4:	f04f 0600 	mov.w	r6, #0
 8002db8:	196b      	adds	r3, r5, r5
 8002dba:	eb46 0406 	adc.w	r4, r6, r6
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4623      	mov	r3, r4
 8002dc2:	f7fd fa01 	bl	80001c8 <__aeabi_uldivmod>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	460c      	mov	r4, r1
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4ba5      	ldr	r3, [pc, #660]	; (8003064 <UART_SetConfig+0x384>)
 8002dce:	fba3 2302 	umull	r2, r3, r3, r2
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	461d      	mov	r5, r3
 8002ddc:	f04f 0600 	mov.w	r6, #0
 8002de0:	46a9      	mov	r9, r5
 8002de2:	46b2      	mov	sl, r6
 8002de4:	eb19 0309 	adds.w	r3, r9, r9
 8002de8:	eb4a 040a 	adc.w	r4, sl, sl
 8002dec:	4699      	mov	r9, r3
 8002dee:	46a2      	mov	sl, r4
 8002df0:	eb19 0905 	adds.w	r9, r9, r5
 8002df4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002df8:	f04f 0100 	mov.w	r1, #0
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e0c:	4689      	mov	r9, r1
 8002e0e:	4692      	mov	sl, r2
 8002e10:	eb19 0005 	adds.w	r0, r9, r5
 8002e14:	eb4a 0106 	adc.w	r1, sl, r6
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	461d      	mov	r5, r3
 8002e1e:	f04f 0600 	mov.w	r6, #0
 8002e22:	196b      	adds	r3, r5, r5
 8002e24:	eb46 0406 	adc.w	r4, r6, r6
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4623      	mov	r3, r4
 8002e2c:	f7fd f9cc 	bl	80001c8 <__aeabi_uldivmod>
 8002e30:	4603      	mov	r3, r0
 8002e32:	460c      	mov	r4, r1
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b8b      	ldr	r3, [pc, #556]	; (8003064 <UART_SetConfig+0x384>)
 8002e38:	fba3 1302 	umull	r1, r3, r3, r2
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	2164      	movs	r1, #100	; 0x64
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	3332      	adds	r3, #50	; 0x32
 8002e4a:	4a86      	ldr	r2, [pc, #536]	; (8003064 <UART_SetConfig+0x384>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e58:	4498      	add	r8, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	461d      	mov	r5, r3
 8002e5e:	f04f 0600 	mov.w	r6, #0
 8002e62:	46a9      	mov	r9, r5
 8002e64:	46b2      	mov	sl, r6
 8002e66:	eb19 0309 	adds.w	r3, r9, r9
 8002e6a:	eb4a 040a 	adc.w	r4, sl, sl
 8002e6e:	4699      	mov	r9, r3
 8002e70:	46a2      	mov	sl, r4
 8002e72:	eb19 0905 	adds.w	r9, r9, r5
 8002e76:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e7a:	f04f 0100 	mov.w	r1, #0
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e8e:	4689      	mov	r9, r1
 8002e90:	4692      	mov	sl, r2
 8002e92:	eb19 0005 	adds.w	r0, r9, r5
 8002e96:	eb4a 0106 	adc.w	r1, sl, r6
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	461d      	mov	r5, r3
 8002ea0:	f04f 0600 	mov.w	r6, #0
 8002ea4:	196b      	adds	r3, r5, r5
 8002ea6:	eb46 0406 	adc.w	r4, r6, r6
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4623      	mov	r3, r4
 8002eae:	f7fd f98b 	bl	80001c8 <__aeabi_uldivmod>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4b6a      	ldr	r3, [pc, #424]	; (8003064 <UART_SetConfig+0x384>)
 8002eba:	fba3 1302 	umull	r1, r3, r3, r2
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	2164      	movs	r1, #100	; 0x64
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	3332      	adds	r3, #50	; 0x32
 8002ecc:	4a65      	ldr	r2, [pc, #404]	; (8003064 <UART_SetConfig+0x384>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	f003 0207 	and.w	r2, r3, #7
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4442      	add	r2, r8
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	e26f      	b.n	80033c2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ee2:	f7ff fe87 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 8002ee6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	461d      	mov	r5, r3
 8002eec:	f04f 0600 	mov.w	r6, #0
 8002ef0:	46a8      	mov	r8, r5
 8002ef2:	46b1      	mov	r9, r6
 8002ef4:	eb18 0308 	adds.w	r3, r8, r8
 8002ef8:	eb49 0409 	adc.w	r4, r9, r9
 8002efc:	4698      	mov	r8, r3
 8002efe:	46a1      	mov	r9, r4
 8002f00:	eb18 0805 	adds.w	r8, r8, r5
 8002f04:	eb49 0906 	adc.w	r9, r9, r6
 8002f08:	f04f 0100 	mov.w	r1, #0
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f1c:	4688      	mov	r8, r1
 8002f1e:	4691      	mov	r9, r2
 8002f20:	eb18 0005 	adds.w	r0, r8, r5
 8002f24:	eb49 0106 	adc.w	r1, r9, r6
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	461d      	mov	r5, r3
 8002f2e:	f04f 0600 	mov.w	r6, #0
 8002f32:	196b      	adds	r3, r5, r5
 8002f34:	eb46 0406 	adc.w	r4, r6, r6
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	f7fd f944 	bl	80001c8 <__aeabi_uldivmod>
 8002f40:	4603      	mov	r3, r0
 8002f42:	460c      	mov	r4, r1
 8002f44:	461a      	mov	r2, r3
 8002f46:	4b47      	ldr	r3, [pc, #284]	; (8003064 <UART_SetConfig+0x384>)
 8002f48:	fba3 2302 	umull	r2, r3, r3, r2
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	461d      	mov	r5, r3
 8002f56:	f04f 0600 	mov.w	r6, #0
 8002f5a:	46a9      	mov	r9, r5
 8002f5c:	46b2      	mov	sl, r6
 8002f5e:	eb19 0309 	adds.w	r3, r9, r9
 8002f62:	eb4a 040a 	adc.w	r4, sl, sl
 8002f66:	4699      	mov	r9, r3
 8002f68:	46a2      	mov	sl, r4
 8002f6a:	eb19 0905 	adds.w	r9, r9, r5
 8002f6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f72:	f04f 0100 	mov.w	r1, #0
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f86:	4689      	mov	r9, r1
 8002f88:	4692      	mov	sl, r2
 8002f8a:	eb19 0005 	adds.w	r0, r9, r5
 8002f8e:	eb4a 0106 	adc.w	r1, sl, r6
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	461d      	mov	r5, r3
 8002f98:	f04f 0600 	mov.w	r6, #0
 8002f9c:	196b      	adds	r3, r5, r5
 8002f9e:	eb46 0406 	adc.w	r4, r6, r6
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4623      	mov	r3, r4
 8002fa6:	f7fd f90f 	bl	80001c8 <__aeabi_uldivmod>
 8002faa:	4603      	mov	r3, r0
 8002fac:	460c      	mov	r4, r1
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <UART_SetConfig+0x384>)
 8002fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	2164      	movs	r1, #100	; 0x64
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	3332      	adds	r3, #50	; 0x32
 8002fc4:	4a27      	ldr	r2, [pc, #156]	; (8003064 <UART_SetConfig+0x384>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fd2:	4498      	add	r8, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	461d      	mov	r5, r3
 8002fd8:	f04f 0600 	mov.w	r6, #0
 8002fdc:	46a9      	mov	r9, r5
 8002fde:	46b2      	mov	sl, r6
 8002fe0:	eb19 0309 	adds.w	r3, r9, r9
 8002fe4:	eb4a 040a 	adc.w	r4, sl, sl
 8002fe8:	4699      	mov	r9, r3
 8002fea:	46a2      	mov	sl, r4
 8002fec:	eb19 0905 	adds.w	r9, r9, r5
 8002ff0:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ff4:	f04f 0100 	mov.w	r1, #0
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003000:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003004:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003008:	4689      	mov	r9, r1
 800300a:	4692      	mov	sl, r2
 800300c:	eb19 0005 	adds.w	r0, r9, r5
 8003010:	eb4a 0106 	adc.w	r1, sl, r6
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	461d      	mov	r5, r3
 800301a:	f04f 0600 	mov.w	r6, #0
 800301e:	196b      	adds	r3, r5, r5
 8003020:	eb46 0406 	adc.w	r4, r6, r6
 8003024:	461a      	mov	r2, r3
 8003026:	4623      	mov	r3, r4
 8003028:	f7fd f8ce 	bl	80001c8 <__aeabi_uldivmod>
 800302c:	4603      	mov	r3, r0
 800302e:	460c      	mov	r4, r1
 8003030:	461a      	mov	r2, r3
 8003032:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <UART_SetConfig+0x384>)
 8003034:	fba3 1302 	umull	r1, r3, r3, r2
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	2164      	movs	r1, #100	; 0x64
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	3332      	adds	r3, #50	; 0x32
 8003046:	4a07      	ldr	r2, [pc, #28]	; (8003064 <UART_SetConfig+0x384>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	f003 0207 	and.w	r2, r3, #7
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4442      	add	r2, r8
 8003058:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800305a:	e1b2      	b.n	80033c2 <UART_SetConfig+0x6e2>
 800305c:	40011000 	.word	0x40011000
 8003060:	40011400 	.word	0x40011400
 8003064:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4ad7      	ldr	r2, [pc, #860]	; (80033cc <UART_SetConfig+0x6ec>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d005      	beq.n	800307e <UART_SetConfig+0x39e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4ad6      	ldr	r2, [pc, #856]	; (80033d0 <UART_SetConfig+0x6f0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	f040 80d1 	bne.w	8003220 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800307e:	f7ff fdcd 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 8003082:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	469a      	mov	sl, r3
 8003088:	f04f 0b00 	mov.w	fp, #0
 800308c:	46d0      	mov	r8, sl
 800308e:	46d9      	mov	r9, fp
 8003090:	eb18 0308 	adds.w	r3, r8, r8
 8003094:	eb49 0409 	adc.w	r4, r9, r9
 8003098:	4698      	mov	r8, r3
 800309a:	46a1      	mov	r9, r4
 800309c:	eb18 080a 	adds.w	r8, r8, sl
 80030a0:	eb49 090b 	adc.w	r9, r9, fp
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030b8:	4688      	mov	r8, r1
 80030ba:	4691      	mov	r9, r2
 80030bc:	eb1a 0508 	adds.w	r5, sl, r8
 80030c0:	eb4b 0609 	adc.w	r6, fp, r9
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4619      	mov	r1, r3
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	f04f 0400 	mov.w	r4, #0
 80030d6:	0094      	lsls	r4, r2, #2
 80030d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030dc:	008b      	lsls	r3, r1, #2
 80030de:	461a      	mov	r2, r3
 80030e0:	4623      	mov	r3, r4
 80030e2:	4628      	mov	r0, r5
 80030e4:	4631      	mov	r1, r6
 80030e6:	f7fd f86f 	bl	80001c8 <__aeabi_uldivmod>
 80030ea:	4603      	mov	r3, r0
 80030ec:	460c      	mov	r4, r1
 80030ee:	461a      	mov	r2, r3
 80030f0:	4bb8      	ldr	r3, [pc, #736]	; (80033d4 <UART_SetConfig+0x6f4>)
 80030f2:	fba3 2302 	umull	r2, r3, r3, r2
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	469b      	mov	fp, r3
 8003100:	f04f 0c00 	mov.w	ip, #0
 8003104:	46d9      	mov	r9, fp
 8003106:	46e2      	mov	sl, ip
 8003108:	eb19 0309 	adds.w	r3, r9, r9
 800310c:	eb4a 040a 	adc.w	r4, sl, sl
 8003110:	4699      	mov	r9, r3
 8003112:	46a2      	mov	sl, r4
 8003114:	eb19 090b 	adds.w	r9, r9, fp
 8003118:	eb4a 0a0c 	adc.w	sl, sl, ip
 800311c:	f04f 0100 	mov.w	r1, #0
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003128:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800312c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003130:	4689      	mov	r9, r1
 8003132:	4692      	mov	sl, r2
 8003134:	eb1b 0509 	adds.w	r5, fp, r9
 8003138:	eb4c 060a 	adc.w	r6, ip, sl
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4619      	mov	r1, r3
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	f04f 0400 	mov.w	r4, #0
 800314e:	0094      	lsls	r4, r2, #2
 8003150:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003154:	008b      	lsls	r3, r1, #2
 8003156:	461a      	mov	r2, r3
 8003158:	4623      	mov	r3, r4
 800315a:	4628      	mov	r0, r5
 800315c:	4631      	mov	r1, r6
 800315e:	f7fd f833 	bl	80001c8 <__aeabi_uldivmod>
 8003162:	4603      	mov	r3, r0
 8003164:	460c      	mov	r4, r1
 8003166:	461a      	mov	r2, r3
 8003168:	4b9a      	ldr	r3, [pc, #616]	; (80033d4 <UART_SetConfig+0x6f4>)
 800316a:	fba3 1302 	umull	r1, r3, r3, r2
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2164      	movs	r1, #100	; 0x64
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	3332      	adds	r3, #50	; 0x32
 800317c:	4a95      	ldr	r2, [pc, #596]	; (80033d4 <UART_SetConfig+0x6f4>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003188:	4498      	add	r8, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	469b      	mov	fp, r3
 800318e:	f04f 0c00 	mov.w	ip, #0
 8003192:	46d9      	mov	r9, fp
 8003194:	46e2      	mov	sl, ip
 8003196:	eb19 0309 	adds.w	r3, r9, r9
 800319a:	eb4a 040a 	adc.w	r4, sl, sl
 800319e:	4699      	mov	r9, r3
 80031a0:	46a2      	mov	sl, r4
 80031a2:	eb19 090b 	adds.w	r9, r9, fp
 80031a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031aa:	f04f 0100 	mov.w	r1, #0
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031be:	4689      	mov	r9, r1
 80031c0:	4692      	mov	sl, r2
 80031c2:	eb1b 0509 	adds.w	r5, fp, r9
 80031c6:	eb4c 060a 	adc.w	r6, ip, sl
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4619      	mov	r1, r3
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	f04f 0400 	mov.w	r4, #0
 80031dc:	0094      	lsls	r4, r2, #2
 80031de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031e2:	008b      	lsls	r3, r1, #2
 80031e4:	461a      	mov	r2, r3
 80031e6:	4623      	mov	r3, r4
 80031e8:	4628      	mov	r0, r5
 80031ea:	4631      	mov	r1, r6
 80031ec:	f7fc ffec 	bl	80001c8 <__aeabi_uldivmod>
 80031f0:	4603      	mov	r3, r0
 80031f2:	460c      	mov	r4, r1
 80031f4:	461a      	mov	r2, r3
 80031f6:	4b77      	ldr	r3, [pc, #476]	; (80033d4 <UART_SetConfig+0x6f4>)
 80031f8:	fba3 1302 	umull	r1, r3, r3, r2
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	2164      	movs	r1, #100	; 0x64
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	3332      	adds	r3, #50	; 0x32
 800320a:	4a72      	ldr	r2, [pc, #456]	; (80033d4 <UART_SetConfig+0x6f4>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	f003 020f 	and.w	r2, r3, #15
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4442      	add	r2, r8
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	e0d0      	b.n	80033c2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003220:	f7ff fce8 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 8003224:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	469a      	mov	sl, r3
 800322a:	f04f 0b00 	mov.w	fp, #0
 800322e:	46d0      	mov	r8, sl
 8003230:	46d9      	mov	r9, fp
 8003232:	eb18 0308 	adds.w	r3, r8, r8
 8003236:	eb49 0409 	adc.w	r4, r9, r9
 800323a:	4698      	mov	r8, r3
 800323c:	46a1      	mov	r9, r4
 800323e:	eb18 080a 	adds.w	r8, r8, sl
 8003242:	eb49 090b 	adc.w	r9, r9, fp
 8003246:	f04f 0100 	mov.w	r1, #0
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003252:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003256:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800325a:	4688      	mov	r8, r1
 800325c:	4691      	mov	r9, r2
 800325e:	eb1a 0508 	adds.w	r5, sl, r8
 8003262:	eb4b 0609 	adc.w	r6, fp, r9
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4619      	mov	r1, r3
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	f04f 0400 	mov.w	r4, #0
 8003278:	0094      	lsls	r4, r2, #2
 800327a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800327e:	008b      	lsls	r3, r1, #2
 8003280:	461a      	mov	r2, r3
 8003282:	4623      	mov	r3, r4
 8003284:	4628      	mov	r0, r5
 8003286:	4631      	mov	r1, r6
 8003288:	f7fc ff9e 	bl	80001c8 <__aeabi_uldivmod>
 800328c:	4603      	mov	r3, r0
 800328e:	460c      	mov	r4, r1
 8003290:	461a      	mov	r2, r3
 8003292:	4b50      	ldr	r3, [pc, #320]	; (80033d4 <UART_SetConfig+0x6f4>)
 8003294:	fba3 2302 	umull	r2, r3, r3, r2
 8003298:	095b      	lsrs	r3, r3, #5
 800329a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	469b      	mov	fp, r3
 80032a2:	f04f 0c00 	mov.w	ip, #0
 80032a6:	46d9      	mov	r9, fp
 80032a8:	46e2      	mov	sl, ip
 80032aa:	eb19 0309 	adds.w	r3, r9, r9
 80032ae:	eb4a 040a 	adc.w	r4, sl, sl
 80032b2:	4699      	mov	r9, r3
 80032b4:	46a2      	mov	sl, r4
 80032b6:	eb19 090b 	adds.w	r9, r9, fp
 80032ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032be:	f04f 0100 	mov.w	r1, #0
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032d2:	4689      	mov	r9, r1
 80032d4:	4692      	mov	sl, r2
 80032d6:	eb1b 0509 	adds.w	r5, fp, r9
 80032da:	eb4c 060a 	adc.w	r6, ip, sl
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4619      	mov	r1, r3
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	f04f 0400 	mov.w	r4, #0
 80032f0:	0094      	lsls	r4, r2, #2
 80032f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032f6:	008b      	lsls	r3, r1, #2
 80032f8:	461a      	mov	r2, r3
 80032fa:	4623      	mov	r3, r4
 80032fc:	4628      	mov	r0, r5
 80032fe:	4631      	mov	r1, r6
 8003300:	f7fc ff62 	bl	80001c8 <__aeabi_uldivmod>
 8003304:	4603      	mov	r3, r0
 8003306:	460c      	mov	r4, r1
 8003308:	461a      	mov	r2, r3
 800330a:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <UART_SetConfig+0x6f4>)
 800330c:	fba3 1302 	umull	r1, r3, r3, r2
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	2164      	movs	r1, #100	; 0x64
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	3332      	adds	r3, #50	; 0x32
 800331e:	4a2d      	ldr	r2, [pc, #180]	; (80033d4 <UART_SetConfig+0x6f4>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	095b      	lsrs	r3, r3, #5
 8003326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800332a:	4498      	add	r8, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	469b      	mov	fp, r3
 8003330:	f04f 0c00 	mov.w	ip, #0
 8003334:	46d9      	mov	r9, fp
 8003336:	46e2      	mov	sl, ip
 8003338:	eb19 0309 	adds.w	r3, r9, r9
 800333c:	eb4a 040a 	adc.w	r4, sl, sl
 8003340:	4699      	mov	r9, r3
 8003342:	46a2      	mov	sl, r4
 8003344:	eb19 090b 	adds.w	r9, r9, fp
 8003348:	eb4a 0a0c 	adc.w	sl, sl, ip
 800334c:	f04f 0100 	mov.w	r1, #0
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003358:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800335c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003360:	4689      	mov	r9, r1
 8003362:	4692      	mov	sl, r2
 8003364:	eb1b 0509 	adds.w	r5, fp, r9
 8003368:	eb4c 060a 	adc.w	r6, ip, sl
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4619      	mov	r1, r3
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	f04f 0400 	mov.w	r4, #0
 800337e:	0094      	lsls	r4, r2, #2
 8003380:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003384:	008b      	lsls	r3, r1, #2
 8003386:	461a      	mov	r2, r3
 8003388:	4623      	mov	r3, r4
 800338a:	4628      	mov	r0, r5
 800338c:	4631      	mov	r1, r6
 800338e:	f7fc ff1b 	bl	80001c8 <__aeabi_uldivmod>
 8003392:	4603      	mov	r3, r0
 8003394:	460c      	mov	r4, r1
 8003396:	461a      	mov	r2, r3
 8003398:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <UART_SetConfig+0x6f4>)
 800339a:	fba3 1302 	umull	r1, r3, r3, r2
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2164      	movs	r1, #100	; 0x64
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	3332      	adds	r3, #50	; 0x32
 80033ac:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <UART_SetConfig+0x6f4>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	f003 020f 	and.w	r2, r3, #15
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4442      	add	r2, r8
 80033be:	609a      	str	r2, [r3, #8]
}
 80033c0:	e7ff      	b.n	80033c2 <UART_SetConfig+0x6e2>
 80033c2:	bf00      	nop
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033cc:	40011000 	.word	0x40011000
 80033d0:	40011400 	.word	0x40011400
 80033d4:	51eb851f 	.word	0x51eb851f

080033d8 <atoi>:
 80033d8:	220a      	movs	r2, #10
 80033da:	2100      	movs	r1, #0
 80033dc:	f000 b8ba 	b.w	8003554 <strtol>

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	4e0d      	ldr	r6, [pc, #52]	; (8003418 <__libc_init_array+0x38>)
 80033e4:	4c0d      	ldr	r4, [pc, #52]	; (800341c <__libc_init_array+0x3c>)
 80033e6:	1ba4      	subs	r4, r4, r6
 80033e8:	10a4      	asrs	r4, r4, #2
 80033ea:	2500      	movs	r5, #0
 80033ec:	42a5      	cmp	r5, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	4e0b      	ldr	r6, [pc, #44]	; (8003420 <__libc_init_array+0x40>)
 80033f2:	4c0c      	ldr	r4, [pc, #48]	; (8003424 <__libc_init_array+0x44>)
 80033f4:	f000 f8e6 	bl	80035c4 <_init>
 80033f8:	1ba4      	subs	r4, r4, r6
 80033fa:	10a4      	asrs	r4, r4, #2
 80033fc:	2500      	movs	r5, #0
 80033fe:	42a5      	cmp	r5, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003408:	4798      	blx	r3
 800340a:	3501      	adds	r5, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003412:	4798      	blx	r3
 8003414:	3501      	adds	r5, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	08003a00 	.word	0x08003a00
 800341c:	08003a00 	.word	0x08003a00
 8003420:	08003a00 	.word	0x08003a00
 8003424:	08003a04 	.word	0x08003a04

08003428 <memset>:
 8003428:	4402      	add	r2, r0
 800342a:	4603      	mov	r3, r0
 800342c:	4293      	cmp	r3, r2
 800342e:	d100      	bne.n	8003432 <memset+0xa>
 8003430:	4770      	bx	lr
 8003432:	f803 1b01 	strb.w	r1, [r3], #1
 8003436:	e7f9      	b.n	800342c <memset+0x4>

08003438 <strncmp>:
 8003438:	b510      	push	{r4, lr}
 800343a:	b16a      	cbz	r2, 8003458 <strncmp+0x20>
 800343c:	3901      	subs	r1, #1
 800343e:	1884      	adds	r4, r0, r2
 8003440:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003444:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003448:	4293      	cmp	r3, r2
 800344a:	d103      	bne.n	8003454 <strncmp+0x1c>
 800344c:	42a0      	cmp	r0, r4
 800344e:	d001      	beq.n	8003454 <strncmp+0x1c>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f5      	bne.n	8003440 <strncmp+0x8>
 8003454:	1a98      	subs	r0, r3, r2
 8003456:	bd10      	pop	{r4, pc}
 8003458:	4610      	mov	r0, r2
 800345a:	e7fc      	b.n	8003456 <strncmp+0x1e>

0800345c <_strtol_l.isra.0>:
 800345c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003460:	4680      	mov	r8, r0
 8003462:	4689      	mov	r9, r1
 8003464:	4692      	mov	sl, r2
 8003466:	461e      	mov	r6, r3
 8003468:	460f      	mov	r7, r1
 800346a:	463d      	mov	r5, r7
 800346c:	9808      	ldr	r0, [sp, #32]
 800346e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003472:	f000 f885 	bl	8003580 <__locale_ctype_ptr_l>
 8003476:	4420      	add	r0, r4
 8003478:	7843      	ldrb	r3, [r0, #1]
 800347a:	f013 0308 	ands.w	r3, r3, #8
 800347e:	d132      	bne.n	80034e6 <_strtol_l.isra.0+0x8a>
 8003480:	2c2d      	cmp	r4, #45	; 0x2d
 8003482:	d132      	bne.n	80034ea <_strtol_l.isra.0+0x8e>
 8003484:	787c      	ldrb	r4, [r7, #1]
 8003486:	1cbd      	adds	r5, r7, #2
 8003488:	2201      	movs	r2, #1
 800348a:	2e00      	cmp	r6, #0
 800348c:	d05d      	beq.n	800354a <_strtol_l.isra.0+0xee>
 800348e:	2e10      	cmp	r6, #16
 8003490:	d109      	bne.n	80034a6 <_strtol_l.isra.0+0x4a>
 8003492:	2c30      	cmp	r4, #48	; 0x30
 8003494:	d107      	bne.n	80034a6 <_strtol_l.isra.0+0x4a>
 8003496:	782b      	ldrb	r3, [r5, #0]
 8003498:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800349c:	2b58      	cmp	r3, #88	; 0x58
 800349e:	d14f      	bne.n	8003540 <_strtol_l.isra.0+0xe4>
 80034a0:	786c      	ldrb	r4, [r5, #1]
 80034a2:	2610      	movs	r6, #16
 80034a4:	3502      	adds	r5, #2
 80034a6:	2a00      	cmp	r2, #0
 80034a8:	bf14      	ite	ne
 80034aa:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80034ae:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80034b2:	2700      	movs	r7, #0
 80034b4:	fbb1 fcf6 	udiv	ip, r1, r6
 80034b8:	4638      	mov	r0, r7
 80034ba:	fb06 1e1c 	mls	lr, r6, ip, r1
 80034be:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80034c2:	2b09      	cmp	r3, #9
 80034c4:	d817      	bhi.n	80034f6 <_strtol_l.isra.0+0x9a>
 80034c6:	461c      	mov	r4, r3
 80034c8:	42a6      	cmp	r6, r4
 80034ca:	dd23      	ble.n	8003514 <_strtol_l.isra.0+0xb8>
 80034cc:	1c7b      	adds	r3, r7, #1
 80034ce:	d007      	beq.n	80034e0 <_strtol_l.isra.0+0x84>
 80034d0:	4584      	cmp	ip, r0
 80034d2:	d31c      	bcc.n	800350e <_strtol_l.isra.0+0xb2>
 80034d4:	d101      	bne.n	80034da <_strtol_l.isra.0+0x7e>
 80034d6:	45a6      	cmp	lr, r4
 80034d8:	db19      	blt.n	800350e <_strtol_l.isra.0+0xb2>
 80034da:	fb00 4006 	mla	r0, r0, r6, r4
 80034de:	2701      	movs	r7, #1
 80034e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80034e4:	e7eb      	b.n	80034be <_strtol_l.isra.0+0x62>
 80034e6:	462f      	mov	r7, r5
 80034e8:	e7bf      	b.n	800346a <_strtol_l.isra.0+0xe>
 80034ea:	2c2b      	cmp	r4, #43	; 0x2b
 80034ec:	bf04      	itt	eq
 80034ee:	1cbd      	addeq	r5, r7, #2
 80034f0:	787c      	ldrbeq	r4, [r7, #1]
 80034f2:	461a      	mov	r2, r3
 80034f4:	e7c9      	b.n	800348a <_strtol_l.isra.0+0x2e>
 80034f6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80034fa:	2b19      	cmp	r3, #25
 80034fc:	d801      	bhi.n	8003502 <_strtol_l.isra.0+0xa6>
 80034fe:	3c37      	subs	r4, #55	; 0x37
 8003500:	e7e2      	b.n	80034c8 <_strtol_l.isra.0+0x6c>
 8003502:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003506:	2b19      	cmp	r3, #25
 8003508:	d804      	bhi.n	8003514 <_strtol_l.isra.0+0xb8>
 800350a:	3c57      	subs	r4, #87	; 0x57
 800350c:	e7dc      	b.n	80034c8 <_strtol_l.isra.0+0x6c>
 800350e:	f04f 37ff 	mov.w	r7, #4294967295
 8003512:	e7e5      	b.n	80034e0 <_strtol_l.isra.0+0x84>
 8003514:	1c7b      	adds	r3, r7, #1
 8003516:	d108      	bne.n	800352a <_strtol_l.isra.0+0xce>
 8003518:	2322      	movs	r3, #34	; 0x22
 800351a:	f8c8 3000 	str.w	r3, [r8]
 800351e:	4608      	mov	r0, r1
 8003520:	f1ba 0f00 	cmp.w	sl, #0
 8003524:	d107      	bne.n	8003536 <_strtol_l.isra.0+0xda>
 8003526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800352a:	b102      	cbz	r2, 800352e <_strtol_l.isra.0+0xd2>
 800352c:	4240      	negs	r0, r0
 800352e:	f1ba 0f00 	cmp.w	sl, #0
 8003532:	d0f8      	beq.n	8003526 <_strtol_l.isra.0+0xca>
 8003534:	b10f      	cbz	r7, 800353a <_strtol_l.isra.0+0xde>
 8003536:	f105 39ff 	add.w	r9, r5, #4294967295
 800353a:	f8ca 9000 	str.w	r9, [sl]
 800353e:	e7f2      	b.n	8003526 <_strtol_l.isra.0+0xca>
 8003540:	2430      	movs	r4, #48	; 0x30
 8003542:	2e00      	cmp	r6, #0
 8003544:	d1af      	bne.n	80034a6 <_strtol_l.isra.0+0x4a>
 8003546:	2608      	movs	r6, #8
 8003548:	e7ad      	b.n	80034a6 <_strtol_l.isra.0+0x4a>
 800354a:	2c30      	cmp	r4, #48	; 0x30
 800354c:	d0a3      	beq.n	8003496 <_strtol_l.isra.0+0x3a>
 800354e:	260a      	movs	r6, #10
 8003550:	e7a9      	b.n	80034a6 <_strtol_l.isra.0+0x4a>
	...

08003554 <strtol>:
 8003554:	4b08      	ldr	r3, [pc, #32]	; (8003578 <strtol+0x24>)
 8003556:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003558:	681c      	ldr	r4, [r3, #0]
 800355a:	4d08      	ldr	r5, [pc, #32]	; (800357c <strtol+0x28>)
 800355c:	6a23      	ldr	r3, [r4, #32]
 800355e:	2b00      	cmp	r3, #0
 8003560:	bf08      	it	eq
 8003562:	462b      	moveq	r3, r5
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	4613      	mov	r3, r2
 8003568:	460a      	mov	r2, r1
 800356a:	4601      	mov	r1, r0
 800356c:	4620      	mov	r0, r4
 800356e:	f7ff ff75 	bl	800345c <_strtol_l.isra.0>
 8003572:	b003      	add	sp, #12
 8003574:	bd30      	pop	{r4, r5, pc}
 8003576:	bf00      	nop
 8003578:	20000014 	.word	0x20000014
 800357c:	20000078 	.word	0x20000078

08003580 <__locale_ctype_ptr_l>:
 8003580:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003584:	4770      	bx	lr

08003586 <__ascii_mbtowc>:
 8003586:	b082      	sub	sp, #8
 8003588:	b901      	cbnz	r1, 800358c <__ascii_mbtowc+0x6>
 800358a:	a901      	add	r1, sp, #4
 800358c:	b142      	cbz	r2, 80035a0 <__ascii_mbtowc+0x1a>
 800358e:	b14b      	cbz	r3, 80035a4 <__ascii_mbtowc+0x1e>
 8003590:	7813      	ldrb	r3, [r2, #0]
 8003592:	600b      	str	r3, [r1, #0]
 8003594:	7812      	ldrb	r2, [r2, #0]
 8003596:	1c10      	adds	r0, r2, #0
 8003598:	bf18      	it	ne
 800359a:	2001      	movne	r0, #1
 800359c:	b002      	add	sp, #8
 800359e:	4770      	bx	lr
 80035a0:	4610      	mov	r0, r2
 80035a2:	e7fb      	b.n	800359c <__ascii_mbtowc+0x16>
 80035a4:	f06f 0001 	mvn.w	r0, #1
 80035a8:	e7f8      	b.n	800359c <__ascii_mbtowc+0x16>

080035aa <__ascii_wctomb>:
 80035aa:	b149      	cbz	r1, 80035c0 <__ascii_wctomb+0x16>
 80035ac:	2aff      	cmp	r2, #255	; 0xff
 80035ae:	bf85      	ittet	hi
 80035b0:	238a      	movhi	r3, #138	; 0x8a
 80035b2:	6003      	strhi	r3, [r0, #0]
 80035b4:	700a      	strbls	r2, [r1, #0]
 80035b6:	f04f 30ff 	movhi.w	r0, #4294967295
 80035ba:	bf98      	it	ls
 80035bc:	2001      	movls	r0, #1
 80035be:	4770      	bx	lr
 80035c0:	4608      	mov	r0, r1
 80035c2:	4770      	bx	lr

080035c4 <_init>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	bf00      	nop
 80035c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ca:	bc08      	pop	{r3}
 80035cc:	469e      	mov	lr, r3
 80035ce:	4770      	bx	lr

080035d0 <_fini>:
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	bf00      	nop
 80035d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d6:	bc08      	pop	{r3}
 80035d8:	469e      	mov	lr, r3
 80035da:	4770      	bx	lr
